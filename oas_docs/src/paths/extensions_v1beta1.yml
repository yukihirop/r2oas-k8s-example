---
paths:
  "/apis/extensions/v1beta1/":
    get:
      description: get available resources
      operationId: getExtensionsV1beta1APIResources
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      servers: []
  "/apis/extensions/v1beta1/daemonsets":
    get:
      description: list or watch objects of kind DaemonSet
      operationId: listExtensionsV1beta1DaemonSetForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSetList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSetList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSetList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSetList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSetList"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: extensions
        kind: DaemonSet
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/deployments":
    get:
      description: list or watch objects of kind Deployment
      operationId: listExtensionsV1beta1DeploymentForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DeploymentList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DeploymentList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DeploymentList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DeploymentList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DeploymentList"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Deployment
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/ingresses":
    get:
      description: list or watch objects of kind Ingress
      operationId: listExtensionsV1beta1IngressForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.IngressList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.IngressList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.IngressList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.IngressList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.IngressList"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Ingress
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets":
    delete:
      description: delete collection of DaemonSet
      operationId: deleteExtensionsV1beta1CollectionNamespacedDaemonSet
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: extensions
        kind: DaemonSet
        version: v1beta1
      servers: []
    get:
      description: list or watch objects of kind DaemonSet
      operationId: listExtensionsV1beta1NamespacedDaemonSet
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSetList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSetList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSetList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSetList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSetList"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: extensions
        kind: DaemonSet
        version: v1beta1
      servers: []
    post:
      description: create a DaemonSet
      operationId: createExtensionsV1beta1NamespacedDaemonSet
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.extensions.v1beta1.DaemonSet"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: extensions
        kind: DaemonSet
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}":
    delete:
      description: delete a DaemonSet
      operationId: deleteExtensionsV1beta1NamespacedDaemonSet
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: extensions
        kind: DaemonSet
        version: v1beta1
      servers: []
    get:
      description: read the specified DaemonSet
      operationId: readExtensionsV1beta1NamespacedDaemonSet
      parameters:
      - description: Should the export be exact.  Exact export maintains cluster-specific
          fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
        in: query
        name: exact
        schema:
          type: boolean
          uniqueItems: true
      - description: Should this value be exported.  Export strips fields that a user
          can not specify. Deprecated. Planned for removal in 1.18.
        in: query
        name: export
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: extensions
        kind: DaemonSet
        version: v1beta1
      servers: []
    patch:
      description: partially update the specified DaemonSet
      operationId: patchExtensionsV1beta1NamespacedDaemonSet
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: extensions
        kind: DaemonSet
        version: v1beta1
      servers: []
    put:
      description: replace the specified DaemonSet
      operationId: replaceExtensionsV1beta1NamespacedDaemonSet
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.extensions.v1beta1.DaemonSet"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: extensions
        kind: DaemonSet
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status":
    get:
      description: read status of the specified DaemonSet
      operationId: readExtensionsV1beta1NamespacedDaemonSetStatus
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: extensions
        kind: DaemonSet
        version: v1beta1
      servers: []
    patch:
      description: partially update status of the specified DaemonSet
      operationId: patchExtensionsV1beta1NamespacedDaemonSetStatus
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: extensions
        kind: DaemonSet
        version: v1beta1
      servers: []
    put:
      description: replace status of the specified DaemonSet
      operationId: replaceExtensionsV1beta1NamespacedDaemonSetStatus
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.extensions.v1beta1.DaemonSet"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DaemonSet"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: extensions
        kind: DaemonSet
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/namespaces/{namespace}/deployments":
    delete:
      description: delete collection of Deployment
      operationId: deleteExtensionsV1beta1CollectionNamespacedDeployment
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Deployment
        version: v1beta1
      servers: []
    get:
      description: list or watch objects of kind Deployment
      operationId: listExtensionsV1beta1NamespacedDeployment
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DeploymentList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DeploymentList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DeploymentList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DeploymentList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DeploymentList"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Deployment
        version: v1beta1
      servers: []
    post:
      description: create a Deployment
      operationId: createExtensionsV1beta1NamespacedDeployment
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.extensions.v1beta1.Deployment"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Deployment
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}":
    delete:
      description: delete a Deployment
      operationId: deleteExtensionsV1beta1NamespacedDeployment
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Deployment
        version: v1beta1
      servers: []
    get:
      description: read the specified Deployment
      operationId: readExtensionsV1beta1NamespacedDeployment
      parameters:
      - description: Should the export be exact.  Exact export maintains cluster-specific
          fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
        in: query
        name: exact
        schema:
          type: boolean
          uniqueItems: true
      - description: Should this value be exported.  Export strips fields that a user
          can not specify. Deprecated. Planned for removal in 1.18.
        in: query
        name: export
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Deployment
        version: v1beta1
      servers: []
    patch:
      description: partially update the specified Deployment
      operationId: patchExtensionsV1beta1NamespacedDeployment
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Deployment
        version: v1beta1
      servers: []
    put:
      description: replace the specified Deployment
      operationId: replaceExtensionsV1beta1NamespacedDeployment
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.extensions.v1beta1.Deployment"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Deployment
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/rollback":
    post:
      description: create rollback of a Deployment
      operationId: createExtensionsV1beta1NamespacedDeploymentRollback
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.DeploymentRollback"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: extensions
        kind: DeploymentRollback
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale":
    get:
      description: read scale of the specified Deployment
      operationId: readExtensionsV1beta1NamespacedDeploymentScale
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Scale
        version: v1beta1
      servers: []
    patch:
      description: partially update scale of the specified Deployment
      operationId: patchExtensionsV1beta1NamespacedDeploymentScale
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Scale
        version: v1beta1
      servers: []
    put:
      description: replace scale of the specified Deployment
      operationId: replaceExtensionsV1beta1NamespacedDeploymentScale
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.extensions.v1beta1.Scale"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Scale
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status":
    get:
      description: read status of the specified Deployment
      operationId: readExtensionsV1beta1NamespacedDeploymentStatus
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Deployment
        version: v1beta1
      servers: []
    patch:
      description: partially update status of the specified Deployment
      operationId: patchExtensionsV1beta1NamespacedDeploymentStatus
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Deployment
        version: v1beta1
      servers: []
    put:
      description: replace status of the specified Deployment
      operationId: replaceExtensionsV1beta1NamespacedDeploymentStatus
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.extensions.v1beta1.Deployment"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Deployment"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Deployment
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses":
    delete:
      description: delete collection of Ingress
      operationId: deleteExtensionsV1beta1CollectionNamespacedIngress
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Ingress
        version: v1beta1
      servers: []
    get:
      description: list or watch objects of kind Ingress
      operationId: listExtensionsV1beta1NamespacedIngress
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.IngressList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.IngressList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.IngressList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.IngressList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.IngressList"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Ingress
        version: v1beta1
      servers: []
    post:
      description: create an Ingress
      operationId: createExtensionsV1beta1NamespacedIngress
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.extensions.v1beta1.Ingress"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Ingress
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}":
    delete:
      description: delete an Ingress
      operationId: deleteExtensionsV1beta1NamespacedIngress
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Ingress
        version: v1beta1
      servers: []
    get:
      description: read the specified Ingress
      operationId: readExtensionsV1beta1NamespacedIngress
      parameters:
      - description: Should the export be exact.  Exact export maintains cluster-specific
          fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
        in: query
        name: exact
        schema:
          type: boolean
          uniqueItems: true
      - description: Should this value be exported.  Export strips fields that a user
          can not specify. Deprecated. Planned for removal in 1.18.
        in: query
        name: export
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Ingress
        version: v1beta1
      servers: []
    patch:
      description: partially update the specified Ingress
      operationId: patchExtensionsV1beta1NamespacedIngress
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Ingress
        version: v1beta1
      servers: []
    put:
      description: replace the specified Ingress
      operationId: replaceExtensionsV1beta1NamespacedIngress
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.extensions.v1beta1.Ingress"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Ingress
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status":
    get:
      description: read status of the specified Ingress
      operationId: readExtensionsV1beta1NamespacedIngressStatus
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Ingress
        version: v1beta1
      servers: []
    patch:
      description: partially update status of the specified Ingress
      operationId: patchExtensionsV1beta1NamespacedIngressStatus
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Ingress
        version: v1beta1
      servers: []
    put:
      description: replace status of the specified Ingress
      operationId: replaceExtensionsV1beta1NamespacedIngressStatus
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.extensions.v1beta1.Ingress"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Ingress"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Ingress
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies":
    delete:
      description: delete collection of NetworkPolicy
      operationId: deleteExtensionsV1beta1CollectionNamespacedNetworkPolicy
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: extensions
        kind: NetworkPolicy
        version: v1beta1
      servers: []
    get:
      description: list or watch objects of kind NetworkPolicy
      operationId: listExtensionsV1beta1NamespacedNetworkPolicy
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.NetworkPolicyList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.NetworkPolicyList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.NetworkPolicyList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.NetworkPolicyList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.NetworkPolicyList"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: extensions
        kind: NetworkPolicy
        version: v1beta1
      servers: []
    post:
      description: create a NetworkPolicy
      operationId: createExtensionsV1beta1NamespacedNetworkPolicy
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.extensions.v1beta1.NetworkPolicy"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.NetworkPolicy"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.NetworkPolicy"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.NetworkPolicy"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.NetworkPolicy"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.NetworkPolicy"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.NetworkPolicy"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.NetworkPolicy"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.NetworkPolicy"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.NetworkPolicy"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: extensions
        kind: NetworkPolicy
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}":
    delete:
      description: delete a NetworkPolicy
      operationId: deleteExtensionsV1beta1NamespacedNetworkPolicy
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: extensions
        kind: NetworkPolicy
        version: v1beta1
      servers: []
    get:
      description: read the specified NetworkPolicy
      operationId: readExtensionsV1beta1NamespacedNetworkPolicy
      parameters:
      - description: Should the export be exact.  Exact export maintains cluster-specific
          fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
        in: query
        name: exact
        schema:
          type: boolean
          uniqueItems: true
      - description: Should this value be exported.  Export strips fields that a user
          can not specify. Deprecated. Planned for removal in 1.18.
        in: query
        name: export
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.NetworkPolicy"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.NetworkPolicy"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.NetworkPolicy"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: extensions
        kind: NetworkPolicy
        version: v1beta1
      servers: []
    patch:
      description: partially update the specified NetworkPolicy
      operationId: patchExtensionsV1beta1NamespacedNetworkPolicy
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.NetworkPolicy"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.NetworkPolicy"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.NetworkPolicy"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: extensions
        kind: NetworkPolicy
        version: v1beta1
      servers: []
    put:
      description: replace the specified NetworkPolicy
      operationId: replaceExtensionsV1beta1NamespacedNetworkPolicy
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.extensions.v1beta1.NetworkPolicy"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.NetworkPolicy"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.NetworkPolicy"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.NetworkPolicy"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.NetworkPolicy"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.NetworkPolicy"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.NetworkPolicy"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: extensions
        kind: NetworkPolicy
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets":
    delete:
      description: delete collection of ReplicaSet
      operationId: deleteExtensionsV1beta1CollectionNamespacedReplicaSet
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: extensions
        kind: ReplicaSet
        version: v1beta1
      servers: []
    get:
      description: list or watch objects of kind ReplicaSet
      operationId: listExtensionsV1beta1NamespacedReplicaSet
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSetList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSetList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSetList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSetList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSetList"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: extensions
        kind: ReplicaSet
        version: v1beta1
      servers: []
    post:
      description: create a ReplicaSet
      operationId: createExtensionsV1beta1NamespacedReplicaSet
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.extensions.v1beta1.ReplicaSet"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: extensions
        kind: ReplicaSet
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}":
    delete:
      description: delete a ReplicaSet
      operationId: deleteExtensionsV1beta1NamespacedReplicaSet
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: extensions
        kind: ReplicaSet
        version: v1beta1
      servers: []
    get:
      description: read the specified ReplicaSet
      operationId: readExtensionsV1beta1NamespacedReplicaSet
      parameters:
      - description: Should the export be exact.  Exact export maintains cluster-specific
          fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
        in: query
        name: exact
        schema:
          type: boolean
          uniqueItems: true
      - description: Should this value be exported.  Export strips fields that a user
          can not specify. Deprecated. Planned for removal in 1.18.
        in: query
        name: export
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: extensions
        kind: ReplicaSet
        version: v1beta1
      servers: []
    patch:
      description: partially update the specified ReplicaSet
      operationId: patchExtensionsV1beta1NamespacedReplicaSet
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: extensions
        kind: ReplicaSet
        version: v1beta1
      servers: []
    put:
      description: replace the specified ReplicaSet
      operationId: replaceExtensionsV1beta1NamespacedReplicaSet
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.extensions.v1beta1.ReplicaSet"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: extensions
        kind: ReplicaSet
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale":
    get:
      description: read scale of the specified ReplicaSet
      operationId: readExtensionsV1beta1NamespacedReplicaSetScale
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Scale
        version: v1beta1
      servers: []
    patch:
      description: partially update scale of the specified ReplicaSet
      operationId: patchExtensionsV1beta1NamespacedReplicaSetScale
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Scale
        version: v1beta1
      servers: []
    put:
      description: replace scale of the specified ReplicaSet
      operationId: replaceExtensionsV1beta1NamespacedReplicaSetScale
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.extensions.v1beta1.Scale"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Scale
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status":
    get:
      description: read status of the specified ReplicaSet
      operationId: readExtensionsV1beta1NamespacedReplicaSetStatus
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: extensions
        kind: ReplicaSet
        version: v1beta1
      servers: []
    patch:
      description: partially update status of the specified ReplicaSet
      operationId: patchExtensionsV1beta1NamespacedReplicaSetStatus
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: extensions
        kind: ReplicaSet
        version: v1beta1
      servers: []
    put:
      description: replace status of the specified ReplicaSet
      operationId: replaceExtensionsV1beta1NamespacedReplicaSetStatus
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.extensions.v1beta1.ReplicaSet"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSet"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: extensions
        kind: ReplicaSet
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale":
    get:
      description: read scale of the specified ReplicationControllerDummy
      operationId: readExtensionsV1beta1NamespacedReplicationControllerDummyScale
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Scale
        version: v1beta1
      servers: []
    patch:
      description: partially update scale of the specified ReplicationControllerDummy
      operationId: patchExtensionsV1beta1NamespacedReplicationControllerDummyScale
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Scale
        version: v1beta1
      servers: []
    put:
      description: replace scale of the specified ReplicationControllerDummy
      operationId: replaceExtensionsV1beta1NamespacedReplicationControllerDummyScale
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.extensions.v1beta1.Scale"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.Scale"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Scale
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/networkpolicies":
    get:
      description: list or watch objects of kind NetworkPolicy
      operationId: listExtensionsV1beta1NetworkPolicyForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.NetworkPolicyList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.NetworkPolicyList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.NetworkPolicyList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.NetworkPolicyList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.NetworkPolicyList"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: extensions
        kind: NetworkPolicy
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/podsecuritypolicies":
    delete:
      description: delete collection of PodSecurityPolicy
      operationId: deleteExtensionsV1beta1CollectionPodSecurityPolicy
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: extensions
        kind: PodSecurityPolicy
        version: v1beta1
      servers: []
    get:
      description: list or watch objects of kind PodSecurityPolicy
      operationId: listExtensionsV1beta1PodSecurityPolicy
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.PodSecurityPolicyList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.PodSecurityPolicyList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.PodSecurityPolicyList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.PodSecurityPolicyList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.PodSecurityPolicyList"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: extensions
        kind: PodSecurityPolicy
        version: v1beta1
      servers: []
    post:
      description: create a PodSecurityPolicy
      operationId: createExtensionsV1beta1PodSecurityPolicy
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: extensions
        kind: PodSecurityPolicy
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/podsecuritypolicies/{name}":
    delete:
      description: delete a PodSecurityPolicy
      operationId: deleteExtensionsV1beta1PodSecurityPolicy
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: extensions
        kind: PodSecurityPolicy
        version: v1beta1
      servers: []
    get:
      description: read the specified PodSecurityPolicy
      operationId: readExtensionsV1beta1PodSecurityPolicy
      parameters:
      - description: Should the export be exact.  Exact export maintains cluster-specific
          fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
        in: query
        name: exact
        schema:
          type: boolean
          uniqueItems: true
      - description: Should this value be exported.  Export strips fields that a user
          can not specify. Deprecated. Planned for removal in 1.18.
        in: query
        name: export
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: extensions
        kind: PodSecurityPolicy
        version: v1beta1
      servers: []
    patch:
      description: partially update the specified PodSecurityPolicy
      operationId: patchExtensionsV1beta1PodSecurityPolicy
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: extensions
        kind: PodSecurityPolicy
        version: v1beta1
      servers: []
    put:
      description: replace the specified PodSecurityPolicy
      operationId: replaceExtensionsV1beta1PodSecurityPolicy
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.PodSecurityPolicy"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: extensions
        kind: PodSecurityPolicy
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/replicasets":
    get:
      description: list or watch objects of kind ReplicaSet
      operationId: listExtensionsV1beta1ReplicaSetForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSetList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSetList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSetList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSetList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.extensions.v1beta1.ReplicaSetList"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: extensions
        kind: ReplicaSet
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/watch/daemonsets":
    get:
      description: 'watch individual changes to a list of DaemonSet. deprecated: use
        the ''watch'' parameter with a list operation instead.'
      operationId: watchExtensionsV1beta1DaemonSetListForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: extensions
        kind: DaemonSet
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/watch/deployments":
    get:
      description: 'watch individual changes to a list of Deployment. deprecated:
        use the ''watch'' parameter with a list operation instead.'
      operationId: watchExtensionsV1beta1DeploymentListForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Deployment
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/watch/ingresses":
    get:
      description: 'watch individual changes to a list of Ingress. deprecated: use
        the ''watch'' parameter with a list operation instead.'
      operationId: watchExtensionsV1beta1IngressListForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Ingress
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/watch/namespaces/{namespace}/daemonsets":
    get:
      description: 'watch individual changes to a list of DaemonSet. deprecated: use
        the ''watch'' parameter with a list operation instead.'
      operationId: watchExtensionsV1beta1NamespacedDaemonSetList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: extensions
        kind: DaemonSet
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/watch/namespaces/{namespace}/daemonsets/{name}":
    get:
      description: 'watch changes to an object of kind DaemonSet. deprecated: use
        the ''watch'' parameter with a list operation instead, filtered to a single
        item with the ''fieldSelector'' parameter.'
      operationId: watchExtensionsV1beta1NamespacedDaemonSet
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: extensions
        kind: DaemonSet
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/watch/namespaces/{namespace}/deployments":
    get:
      description: 'watch individual changes to a list of Deployment. deprecated:
        use the ''watch'' parameter with a list operation instead.'
      operationId: watchExtensionsV1beta1NamespacedDeploymentList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Deployment
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/watch/namespaces/{namespace}/deployments/{name}":
    get:
      description: 'watch changes to an object of kind Deployment. deprecated: use
        the ''watch'' parameter with a list operation instead, filtered to a single
        item with the ''fieldSelector'' parameter.'
      operationId: watchExtensionsV1beta1NamespacedDeployment
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Deployment
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses":
    get:
      description: 'watch individual changes to a list of Ingress. deprecated: use
        the ''watch'' parameter with a list operation instead.'
      operationId: watchExtensionsV1beta1NamespacedIngressList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Ingress
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses/{name}":
    get:
      description: 'watch changes to an object of kind Ingress. deprecated: use the
        ''watch'' parameter with a list operation instead, filtered to a single item
        with the ''fieldSelector'' parameter.'
      operationId: watchExtensionsV1beta1NamespacedIngress
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: extensions
        kind: Ingress
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/watch/namespaces/{namespace}/networkpolicies":
    get:
      description: 'watch individual changes to a list of NetworkPolicy. deprecated:
        use the ''watch'' parameter with a list operation instead.'
      operationId: watchExtensionsV1beta1NamespacedNetworkPolicyList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: extensions
        kind: NetworkPolicy
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/watch/namespaces/{namespace}/networkpolicies/{name}":
    get:
      description: 'watch changes to an object of kind NetworkPolicy. deprecated:
        use the ''watch'' parameter with a list operation instead, filtered to a single
        item with the ''fieldSelector'' parameter.'
      operationId: watchExtensionsV1beta1NamespacedNetworkPolicy
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: extensions
        kind: NetworkPolicy
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/watch/namespaces/{namespace}/replicasets":
    get:
      description: 'watch individual changes to a list of ReplicaSet. deprecated:
        use the ''watch'' parameter with a list operation instead.'
      operationId: watchExtensionsV1beta1NamespacedReplicaSetList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: extensions
        kind: ReplicaSet
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/watch/namespaces/{namespace}/replicasets/{name}":
    get:
      description: 'watch changes to an object of kind ReplicaSet. deprecated: use
        the ''watch'' parameter with a list operation instead, filtered to a single
        item with the ''fieldSelector'' parameter.'
      operationId: watchExtensionsV1beta1NamespacedReplicaSet
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: extensions
        kind: ReplicaSet
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/watch/networkpolicies":
    get:
      description: 'watch individual changes to a list of NetworkPolicy. deprecated:
        use the ''watch'' parameter with a list operation instead.'
      operationId: watchExtensionsV1beta1NetworkPolicyListForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: extensions
        kind: NetworkPolicy
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/watch/podsecuritypolicies":
    get:
      description: 'watch individual changes to a list of PodSecurityPolicy. deprecated:
        use the ''watch'' parameter with a list operation instead.'
      operationId: watchExtensionsV1beta1PodSecurityPolicyList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: extensions
        kind: PodSecurityPolicy
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/watch/podsecuritypolicies/{name}":
    get:
      description: 'watch changes to an object of kind PodSecurityPolicy. deprecated:
        use the ''watch'' parameter with a list operation instead, filtered to a single
        item with the ''fieldSelector'' parameter.'
      operationId: watchExtensionsV1beta1PodSecurityPolicy
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: extensions
        kind: PodSecurityPolicy
        version: v1beta1
      servers: []
  "/apis/extensions/v1beta1/watch/replicasets":
    get:
      description: 'watch individual changes to a list of ReplicaSet. deprecated:
        use the ''watch'' parameter with a list operation instead.'
      operationId: watchExtensionsV1beta1ReplicaSetListForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - extensions_v1beta1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: extensions
        kind: ReplicaSet
        version: v1beta1
      servers: []
