---
paths:
  "/api/v1/":
    get:
      description: get available resources
      operationId: getCoreV1APIResources
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      servers: []
  "/api/v1/componentstatuses":
    get:
      description: list objects of kind ComponentStatus
      operationId: listCoreV1ComponentStatus
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ComponentStatusList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ComponentStatusList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ComponentStatusList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ComponentStatusList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ComponentStatusList"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: ComponentStatus
        version: v1
      servers: []
  "/api/v1/componentstatuses/{name}":
    get:
      description: read the specified ComponentStatus
      operationId: readCoreV1ComponentStatus
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ComponentStatus"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ComponentStatus"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ComponentStatus"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: ComponentStatus
        version: v1
      servers: []
  "/api/v1/configmaps":
    get:
      description: list or watch objects of kind ConfigMap
      operationId: listCoreV1ConfigMapForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMapList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMapList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMapList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMapList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMapList"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: ConfigMap
        version: v1
      servers: []
  "/api/v1/endpoints":
    get:
      description: list or watch objects of kind Endpoints
      operationId: listCoreV1EndpointsForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EndpointsList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EndpointsList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EndpointsList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EndpointsList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EndpointsList"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Endpoints
        version: v1
      servers: []
  "/api/v1/events":
    get:
      description: list or watch objects of kind Event
      operationId: listCoreV1EventForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EventList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EventList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EventList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EventList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EventList"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Event
        version: v1
      servers: []
  "/api/v1/limitranges":
    get:
      description: list or watch objects of kind LimitRange
      operationId: listCoreV1LimitRangeForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LimitRangeList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LimitRangeList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LimitRangeList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LimitRangeList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LimitRangeList"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: LimitRange
        version: v1
      servers: []
  "/api/v1/namespaces":
    get:
      description: list or watch objects of kind Namespace
      operationId: listCoreV1Namespace
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.NamespaceList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.NamespaceList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.NamespaceList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.NamespaceList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.NamespaceList"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
      servers: []
    post:
      description: create a Namespace
      operationId: createCoreV1Namespace
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.Namespace"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/bindings":
    post:
      description: create a Binding
      operationId: createCoreV1NamespacedBinding
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.Binding"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Binding"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Binding"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Binding"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Binding"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Binding"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Binding"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Binding"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Binding"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Binding"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: Binding
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/configmaps":
    delete:
      description: delete collection of ConfigMap
      operationId: deleteCoreV1CollectionNamespacedConfigMap
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: ConfigMap
        version: v1
      servers: []
    get:
      description: list or watch objects of kind ConfigMap
      operationId: listCoreV1NamespacedConfigMap
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMapList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMapList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMapList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMapList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMapList"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: ConfigMap
        version: v1
      servers: []
    post:
      description: create a ConfigMap
      operationId: createCoreV1NamespacedConfigMap
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.ConfigMap"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMap"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMap"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMap"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMap"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMap"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMap"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMap"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMap"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMap"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: ConfigMap
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/configmaps/{name}":
    delete:
      description: delete a ConfigMap
      operationId: deleteCoreV1NamespacedConfigMap
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: ConfigMap
        version: v1
      servers: []
    get:
      description: read the specified ConfigMap
      operationId: readCoreV1NamespacedConfigMap
      parameters:
      - description: Should the export be exact.  Exact export maintains cluster-specific
          fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
        in: query
        name: exact
        schema:
          type: boolean
          uniqueItems: true
      - description: Should this value be exported.  Export strips fields that a user
          can not specify. Deprecated. Planned for removal in 1.18.
        in: query
        name: export
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMap"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMap"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMap"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: ConfigMap
        version: v1
      servers: []
    patch:
      description: partially update the specified ConfigMap
      operationId: patchCoreV1NamespacedConfigMap
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMap"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMap"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMap"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: ConfigMap
        version: v1
      servers: []
    put:
      description: replace the specified ConfigMap
      operationId: replaceCoreV1NamespacedConfigMap
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.ConfigMap"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMap"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMap"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMap"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMap"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMap"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ConfigMap"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: ConfigMap
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/endpoints":
    delete:
      description: delete collection of Endpoints
      operationId: deleteCoreV1CollectionNamespacedEndpoints
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: Endpoints
        version: v1
      servers: []
    get:
      description: list or watch objects of kind Endpoints
      operationId: listCoreV1NamespacedEndpoints
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EndpointsList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EndpointsList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EndpointsList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EndpointsList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EndpointsList"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Endpoints
        version: v1
      servers: []
    post:
      description: create Endpoints
      operationId: createCoreV1NamespacedEndpoints
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.Endpoints"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Endpoints"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Endpoints"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Endpoints"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Endpoints"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Endpoints"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Endpoints"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Endpoints"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Endpoints"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Endpoints"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: Endpoints
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/endpoints/{name}":
    delete:
      description: delete Endpoints
      operationId: deleteCoreV1NamespacedEndpoints
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: Endpoints
        version: v1
      servers: []
    get:
      description: read the specified Endpoints
      operationId: readCoreV1NamespacedEndpoints
      parameters:
      - description: Should the export be exact.  Exact export maintains cluster-specific
          fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
        in: query
        name: exact
        schema:
          type: boolean
          uniqueItems: true
      - description: Should this value be exported.  Export strips fields that a user
          can not specify. Deprecated. Planned for removal in 1.18.
        in: query
        name: export
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Endpoints"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Endpoints"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Endpoints"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Endpoints
        version: v1
      servers: []
    patch:
      description: partially update the specified Endpoints
      operationId: patchCoreV1NamespacedEndpoints
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Endpoints"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Endpoints"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Endpoints"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Endpoints
        version: v1
      servers: []
    put:
      description: replace the specified Endpoints
      operationId: replaceCoreV1NamespacedEndpoints
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.Endpoints"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Endpoints"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Endpoints"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Endpoints"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Endpoints"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Endpoints"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Endpoints"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Endpoints
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/events":
    delete:
      description: delete collection of Event
      operationId: deleteCoreV1CollectionNamespacedEvent
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: Event
        version: v1
      servers: []
    get:
      description: list or watch objects of kind Event
      operationId: listCoreV1NamespacedEvent
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EventList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EventList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EventList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EventList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.EventList"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Event
        version: v1
      servers: []
    post:
      description: create an Event
      operationId: createCoreV1NamespacedEvent
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.Event"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Event"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Event"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Event"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Event"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Event"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Event"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Event"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Event"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Event"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: Event
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/events/{name}":
    delete:
      description: delete an Event
      operationId: deleteCoreV1NamespacedEvent
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: Event
        version: v1
      servers: []
    get:
      description: read the specified Event
      operationId: readCoreV1NamespacedEvent
      parameters:
      - description: Should the export be exact.  Exact export maintains cluster-specific
          fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
        in: query
        name: exact
        schema:
          type: boolean
          uniqueItems: true
      - description: Should this value be exported.  Export strips fields that a user
          can not specify. Deprecated. Planned for removal in 1.18.
        in: query
        name: export
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Event"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Event"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Event"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Event
        version: v1
      servers: []
    patch:
      description: partially update the specified Event
      operationId: patchCoreV1NamespacedEvent
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Event"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Event"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Event"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Event
        version: v1
      servers: []
    put:
      description: replace the specified Event
      operationId: replaceCoreV1NamespacedEvent
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.Event"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Event"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Event"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Event"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Event"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Event"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Event"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Event
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/limitranges":
    delete:
      description: delete collection of LimitRange
      operationId: deleteCoreV1CollectionNamespacedLimitRange
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: LimitRange
        version: v1
      servers: []
    get:
      description: list or watch objects of kind LimitRange
      operationId: listCoreV1NamespacedLimitRange
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LimitRangeList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LimitRangeList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LimitRangeList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LimitRangeList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LimitRangeList"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: LimitRange
        version: v1
      servers: []
    post:
      description: create a LimitRange
      operationId: createCoreV1NamespacedLimitRange
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.LimitRange"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LimitRange"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LimitRange"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LimitRange"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LimitRange"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LimitRange"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LimitRange"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LimitRange"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LimitRange"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LimitRange"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: LimitRange
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/limitranges/{name}":
    delete:
      description: delete a LimitRange
      operationId: deleteCoreV1NamespacedLimitRange
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: LimitRange
        version: v1
      servers: []
    get:
      description: read the specified LimitRange
      operationId: readCoreV1NamespacedLimitRange
      parameters:
      - description: Should the export be exact.  Exact export maintains cluster-specific
          fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
        in: query
        name: exact
        schema:
          type: boolean
          uniqueItems: true
      - description: Should this value be exported.  Export strips fields that a user
          can not specify. Deprecated. Planned for removal in 1.18.
        in: query
        name: export
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LimitRange"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LimitRange"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LimitRange"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: LimitRange
        version: v1
      servers: []
    patch:
      description: partially update the specified LimitRange
      operationId: patchCoreV1NamespacedLimitRange
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LimitRange"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LimitRange"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LimitRange"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: LimitRange
        version: v1
      servers: []
    put:
      description: replace the specified LimitRange
      operationId: replaceCoreV1NamespacedLimitRange
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.LimitRange"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LimitRange"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LimitRange"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LimitRange"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LimitRange"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LimitRange"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.LimitRange"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: LimitRange
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/persistentvolumeclaims":
    delete:
      description: delete collection of PersistentVolumeClaim
      operationId: deleteCoreV1CollectionNamespacedPersistentVolumeClaim
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
      servers: []
    get:
      description: list or watch objects of kind PersistentVolumeClaim
      operationId: listCoreV1NamespacedPersistentVolumeClaim
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimList"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
      servers: []
    post:
      description: create a PersistentVolumeClaim
      operationId: createCoreV1NamespacedPersistentVolumeClaim
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.PersistentVolumeClaim"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}":
    delete:
      description: delete a PersistentVolumeClaim
      operationId: deleteCoreV1NamespacedPersistentVolumeClaim
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
      servers: []
    get:
      description: read the specified PersistentVolumeClaim
      operationId: readCoreV1NamespacedPersistentVolumeClaim
      parameters:
      - description: Should the export be exact.  Exact export maintains cluster-specific
          fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
        in: query
        name: exact
        schema:
          type: boolean
          uniqueItems: true
      - description: Should this value be exported.  Export strips fields that a user
          can not specify. Deprecated. Planned for removal in 1.18.
        in: query
        name: export
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
      servers: []
    patch:
      description: partially update the specified PersistentVolumeClaim
      operationId: patchCoreV1NamespacedPersistentVolumeClaim
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
      servers: []
    put:
      description: replace the specified PersistentVolumeClaim
      operationId: replaceCoreV1NamespacedPersistentVolumeClaim
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.PersistentVolumeClaim"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status":
    get:
      description: read status of the specified PersistentVolumeClaim
      operationId: readCoreV1NamespacedPersistentVolumeClaimStatus
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
      servers: []
    patch:
      description: partially update status of the specified PersistentVolumeClaim
      operationId: patchCoreV1NamespacedPersistentVolumeClaimStatus
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
      servers: []
    put:
      description: replace status of the specified PersistentVolumeClaim
      operationId: replaceCoreV1NamespacedPersistentVolumeClaimStatus
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.PersistentVolumeClaim"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/pods":
    delete:
      description: delete collection of Pod
      operationId: deleteCoreV1CollectionNamespacedPod
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
      servers: []
    get:
      description: list or watch objects of kind Pod
      operationId: listCoreV1NamespacedPod
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodList"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
      servers: []
    post:
      description: create a Pod
      operationId: createCoreV1NamespacedPod
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.Pod"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/pods/{name}":
    delete:
      description: delete a Pod
      operationId: deleteCoreV1NamespacedPod
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
      servers: []
    get:
      description: read the specified Pod
      operationId: readCoreV1NamespacedPod
      parameters:
      - description: Should the export be exact.  Exact export maintains cluster-specific
          fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
        in: query
        name: exact
        schema:
          type: boolean
          uniqueItems: true
      - description: Should this value be exported.  Export strips fields that a user
          can not specify. Deprecated. Planned for removal in 1.18.
        in: query
        name: export
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
      servers: []
    patch:
      description: partially update the specified Pod
      operationId: patchCoreV1NamespacedPod
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
      servers: []
    put:
      description: replace the specified Pod
      operationId: replaceCoreV1NamespacedPod
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.Pod"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/pods/{name}/attach":
    get:
      description: connect GET requests to attach of Pod
      operationId: connectCoreV1GetNamespacedPodAttach
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodAttachOptions
        version: v1
      servers: []
    post:
      description: connect POST requests to attach of Pod
      operationId: connectCoreV1PostNamespacedPodAttach
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodAttachOptions
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/pods/{name}/binding":
    post:
      description: create binding of a Pod
      operationId: createCoreV1NamespacedPodBinding
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.Binding"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Binding"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Binding"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Binding"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Binding"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Binding"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Binding"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Binding"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Binding"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Binding"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: Binding
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/pods/{name}/eviction":
    post:
      description: create eviction of a Pod
      operationId: createCoreV1NamespacedPodEviction
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/io.k8s.api.policy.v1beta1.Eviction"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.policy.v1beta1.Eviction"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.policy.v1beta1.Eviction"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.policy.v1beta1.Eviction"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.policy.v1beta1.Eviction"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.policy.v1beta1.Eviction"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.policy.v1beta1.Eviction"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.policy.v1beta1.Eviction"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.policy.v1beta1.Eviction"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.policy.v1beta1.Eviction"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: policy
        kind: Eviction
        version: v1beta1
      servers: []
  "/api/v1/namespaces/{namespace}/pods/{name}/exec":
    get:
      description: connect GET requests to exec of Pod
      operationId: connectCoreV1GetNamespacedPodExec
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodExecOptions
        version: v1
      servers: []
    post:
      description: connect POST requests to exec of Pod
      operationId: connectCoreV1PostNamespacedPodExec
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodExecOptions
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/pods/{name}/log":
    get:
      description: read log of the specified Pod
      operationId: readCoreV1NamespacedPodLog
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            application/yaml:
              schema:
                type: string
            application/vnd.kubernetes.protobuf:
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/pods/{name}/portforward":
    get:
      description: connect GET requests to portforward of Pod
      operationId: connectCoreV1GetNamespacedPodPortforward
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodPortForwardOptions
        version: v1
      servers: []
    post:
      description: connect POST requests to portforward of Pod
      operationId: connectCoreV1PostNamespacedPodPortforward
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodPortForwardOptions
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/pods/{name}/proxy":
    delete:
      description: connect DELETE requests to proxy of Pod
      operationId: connectCoreV1DeleteNamespacedPodProxy
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
      servers: []
    get:
      description: connect GET requests to proxy of Pod
      operationId: connectCoreV1GetNamespacedPodProxy
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
      servers: []
    head:
      description: connect HEAD requests to proxy of Pod
      operationId: connectCoreV1HeadNamespacedPodProxy
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
      servers: []
    options:
      description: connect OPTIONS requests to proxy of Pod
      operationId: connectCoreV1OptionsNamespacedPodProxy
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
      servers: []
    patch:
      description: connect PATCH requests to proxy of Pod
      operationId: connectCoreV1PatchNamespacedPodProxy
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
      servers: []
    post:
      description: connect POST requests to proxy of Pod
      operationId: connectCoreV1PostNamespacedPodProxy
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
      servers: []
    put:
      description: connect PUT requests to proxy of Pod
      operationId: connectCoreV1PutNamespacedPodProxy
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}":
    delete:
      description: connect DELETE requests to proxy of Pod
      operationId: connectCoreV1DeleteNamespacedPodProxyWithPath
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
      servers: []
    get:
      description: connect GET requests to proxy of Pod
      operationId: connectCoreV1GetNamespacedPodProxyWithPath
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
      servers: []
    head:
      description: connect HEAD requests to proxy of Pod
      operationId: connectCoreV1HeadNamespacedPodProxyWithPath
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
      servers: []
    options:
      description: connect OPTIONS requests to proxy of Pod
      operationId: connectCoreV1OptionsNamespacedPodProxyWithPath
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
      servers: []
    patch:
      description: connect PATCH requests to proxy of Pod
      operationId: connectCoreV1PatchNamespacedPodProxyWithPath
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
      servers: []
    post:
      description: connect POST requests to proxy of Pod
      operationId: connectCoreV1PostNamespacedPodProxyWithPath
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
      servers: []
    put:
      description: connect PUT requests to proxy of Pod
      operationId: connectCoreV1PutNamespacedPodProxyWithPath
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/pods/{name}/status":
    get:
      description: read status of the specified Pod
      operationId: readCoreV1NamespacedPodStatus
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
      servers: []
    patch:
      description: partially update status of the specified Pod
      operationId: patchCoreV1NamespacedPodStatus
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
      servers: []
    put:
      description: replace status of the specified Pod
      operationId: replaceCoreV1NamespacedPodStatus
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.Pod"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Pod"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/podtemplates":
    delete:
      description: delete collection of PodTemplate
      operationId: deleteCoreV1CollectionNamespacedPodTemplate
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodTemplate
        version: v1
      servers: []
    get:
      description: list or watch objects of kind PodTemplate
      operationId: listCoreV1NamespacedPodTemplate
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplateList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplateList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplateList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplateList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplateList"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodTemplate
        version: v1
      servers: []
    post:
      description: create a PodTemplate
      operationId: createCoreV1NamespacedPodTemplate
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.PodTemplate"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplate"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplate"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplate"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplate"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplate"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplate"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplate"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplate"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplate"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodTemplate
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/podtemplates/{name}":
    delete:
      description: delete a PodTemplate
      operationId: deleteCoreV1NamespacedPodTemplate
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodTemplate
        version: v1
      servers: []
    get:
      description: read the specified PodTemplate
      operationId: readCoreV1NamespacedPodTemplate
      parameters:
      - description: Should the export be exact.  Exact export maintains cluster-specific
          fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
        in: query
        name: exact
        schema:
          type: boolean
          uniqueItems: true
      - description: Should this value be exported.  Export strips fields that a user
          can not specify. Deprecated. Planned for removal in 1.18.
        in: query
        name: export
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplate"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplate"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplate"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodTemplate
        version: v1
      servers: []
    patch:
      description: partially update the specified PodTemplate
      operationId: patchCoreV1NamespacedPodTemplate
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplate"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplate"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplate"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodTemplate
        version: v1
      servers: []
    put:
      description: replace the specified PodTemplate
      operationId: replaceCoreV1NamespacedPodTemplate
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.PodTemplate"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplate"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplate"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplate"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplate"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplate"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplate"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodTemplate
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/replicationcontrollers":
    delete:
      description: delete collection of ReplicationController
      operationId: deleteCoreV1CollectionNamespacedReplicationController
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
      servers: []
    get:
      description: list or watch objects of kind ReplicationController
      operationId: listCoreV1NamespacedReplicationController
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationControllerList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationControllerList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationControllerList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationControllerList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationControllerList"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
      servers: []
    post:
      description: create a ReplicationController
      operationId: createCoreV1NamespacedReplicationController
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.ReplicationController"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}":
    delete:
      description: delete a ReplicationController
      operationId: deleteCoreV1NamespacedReplicationController
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
      servers: []
    get:
      description: read the specified ReplicationController
      operationId: readCoreV1NamespacedReplicationController
      parameters:
      - description: Should the export be exact.  Exact export maintains cluster-specific
          fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
        in: query
        name: exact
        schema:
          type: boolean
          uniqueItems: true
      - description: Should this value be exported.  Export strips fields that a user
          can not specify. Deprecated. Planned for removal in 1.18.
        in: query
        name: export
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
      servers: []
    patch:
      description: partially update the specified ReplicationController
      operationId: patchCoreV1NamespacedReplicationController
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
      servers: []
    put:
      description: replace the specified ReplicationController
      operationId: replaceCoreV1NamespacedReplicationController
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.ReplicationController"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale":
    get:
      description: read scale of the specified ReplicationController
      operationId: readCoreV1NamespacedReplicationControllerScale
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.autoscaling.v1.Scale"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.autoscaling.v1.Scale"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.autoscaling.v1.Scale"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: Scale
        version: v1
      servers: []
    patch:
      description: partially update scale of the specified ReplicationController
      operationId: patchCoreV1NamespacedReplicationControllerScale
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.autoscaling.v1.Scale"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.autoscaling.v1.Scale"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.autoscaling.v1.Scale"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: Scale
        version: v1
      servers: []
    put:
      description: replace scale of the specified ReplicationController
      operationId: replaceCoreV1NamespacedReplicationControllerScale
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.autoscaling.v1.Scale"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.autoscaling.v1.Scale"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.autoscaling.v1.Scale"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.autoscaling.v1.Scale"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.autoscaling.v1.Scale"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.autoscaling.v1.Scale"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.autoscaling.v1.Scale"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: Scale
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status":
    get:
      description: read status of the specified ReplicationController
      operationId: readCoreV1NamespacedReplicationControllerStatus
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
      servers: []
    patch:
      description: partially update status of the specified ReplicationController
      operationId: patchCoreV1NamespacedReplicationControllerStatus
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
      servers: []
    put:
      description: replace status of the specified ReplicationController
      operationId: replaceCoreV1NamespacedReplicationControllerStatus
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.ReplicationController"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationController"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/resourcequotas":
    delete:
      description: delete collection of ResourceQuota
      operationId: deleteCoreV1CollectionNamespacedResourceQuota
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
      servers: []
    get:
      description: list or watch objects of kind ResourceQuota
      operationId: listCoreV1NamespacedResourceQuota
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuotaList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuotaList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuotaList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuotaList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuotaList"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
      servers: []
    post:
      description: create a ResourceQuota
      operationId: createCoreV1NamespacedResourceQuota
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.ResourceQuota"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/resourcequotas/{name}":
    delete:
      description: delete a ResourceQuota
      operationId: deleteCoreV1NamespacedResourceQuota
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
      servers: []
    get:
      description: read the specified ResourceQuota
      operationId: readCoreV1NamespacedResourceQuota
      parameters:
      - description: Should the export be exact.  Exact export maintains cluster-specific
          fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
        in: query
        name: exact
        schema:
          type: boolean
          uniqueItems: true
      - description: Should this value be exported.  Export strips fields that a user
          can not specify. Deprecated. Planned for removal in 1.18.
        in: query
        name: export
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
      servers: []
    patch:
      description: partially update the specified ResourceQuota
      operationId: patchCoreV1NamespacedResourceQuota
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
      servers: []
    put:
      description: replace the specified ResourceQuota
      operationId: replaceCoreV1NamespacedResourceQuota
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.ResourceQuota"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/resourcequotas/{name}/status":
    get:
      description: read status of the specified ResourceQuota
      operationId: readCoreV1NamespacedResourceQuotaStatus
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
      servers: []
    patch:
      description: partially update status of the specified ResourceQuota
      operationId: patchCoreV1NamespacedResourceQuotaStatus
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
      servers: []
    put:
      description: replace status of the specified ResourceQuota
      operationId: replaceCoreV1NamespacedResourceQuotaStatus
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.ResourceQuota"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuota"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/secrets":
    delete:
      description: delete collection of Secret
      operationId: deleteCoreV1CollectionNamespacedSecret
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: Secret
        version: v1
      servers: []
    get:
      description: list or watch objects of kind Secret
      operationId: listCoreV1NamespacedSecret
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.SecretList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.SecretList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.SecretList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.SecretList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.SecretList"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Secret
        version: v1
      servers: []
    post:
      description: create a Secret
      operationId: createCoreV1NamespacedSecret
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.Secret"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Secret"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Secret"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Secret"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Secret"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Secret"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Secret"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Secret"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Secret"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Secret"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: Secret
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/secrets/{name}":
    delete:
      description: delete a Secret
      operationId: deleteCoreV1NamespacedSecret
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: Secret
        version: v1
      servers: []
    get:
      description: read the specified Secret
      operationId: readCoreV1NamespacedSecret
      parameters:
      - description: Should the export be exact.  Exact export maintains cluster-specific
          fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
        in: query
        name: exact
        schema:
          type: boolean
          uniqueItems: true
      - description: Should this value be exported.  Export strips fields that a user
          can not specify. Deprecated. Planned for removal in 1.18.
        in: query
        name: export
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Secret"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Secret"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Secret"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Secret
        version: v1
      servers: []
    patch:
      description: partially update the specified Secret
      operationId: patchCoreV1NamespacedSecret
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Secret"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Secret"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Secret"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Secret
        version: v1
      servers: []
    put:
      description: replace the specified Secret
      operationId: replaceCoreV1NamespacedSecret
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.Secret"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Secret"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Secret"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Secret"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Secret"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Secret"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Secret"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Secret
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/serviceaccounts":
    delete:
      description: delete collection of ServiceAccount
      operationId: deleteCoreV1CollectionNamespacedServiceAccount
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceAccount
        version: v1
      servers: []
    get:
      description: list or watch objects of kind ServiceAccount
      operationId: listCoreV1NamespacedServiceAccount
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccountList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccountList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccountList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccountList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccountList"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceAccount
        version: v1
      servers: []
    post:
      description: create a ServiceAccount
      operationId: createCoreV1NamespacedServiceAccount
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.ServiceAccount"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccount"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccount"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccount"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccount"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccount"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccount"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccount"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccount"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccount"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceAccount
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/serviceaccounts/{name}":
    delete:
      description: delete a ServiceAccount
      operationId: deleteCoreV1NamespacedServiceAccount
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceAccount
        version: v1
      servers: []
    get:
      description: read the specified ServiceAccount
      operationId: readCoreV1NamespacedServiceAccount
      parameters:
      - description: Should the export be exact.  Exact export maintains cluster-specific
          fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
        in: query
        name: exact
        schema:
          type: boolean
          uniqueItems: true
      - description: Should this value be exported.  Export strips fields that a user
          can not specify. Deprecated. Planned for removal in 1.18.
        in: query
        name: export
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccount"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccount"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccount"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceAccount
        version: v1
      servers: []
    patch:
      description: partially update the specified ServiceAccount
      operationId: patchCoreV1NamespacedServiceAccount
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccount"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccount"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccount"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceAccount
        version: v1
      servers: []
    put:
      description: replace the specified ServiceAccount
      operationId: replaceCoreV1NamespacedServiceAccount
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.ServiceAccount"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccount"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccount"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccount"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccount"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccount"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccount"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceAccount
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/serviceaccounts/{name}/token":
    post:
      description: create token of a ServiceAccount
      operationId: createCoreV1NamespacedServiceAccountToken
      requestBody:
        content:
          "*/*":
            schema:
              "$ref": "#/components/schemas/io.k8s.api.authentication.v1.TokenRequest"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.authentication.v1.TokenRequest"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.authentication.v1.TokenRequest"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.authentication.v1.TokenRequest"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.authentication.v1.TokenRequest"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.authentication.v1.TokenRequest"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.authentication.v1.TokenRequest"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.authentication.v1.TokenRequest"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.authentication.v1.TokenRequest"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.authentication.v1.TokenRequest"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: authentication.k8s.io
        kind: TokenRequest
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/services":
    get:
      description: list or watch objects of kind Service
      operationId: listCoreV1NamespacedService
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceList"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
      servers: []
    post:
      description: create a Service
      operationId: createCoreV1NamespacedService
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.Service"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/services/{name}":
    delete:
      description: delete a Service
      operationId: deleteCoreV1NamespacedService
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
      servers: []
    get:
      description: read the specified Service
      operationId: readCoreV1NamespacedService
      parameters:
      - description: Should the export be exact.  Exact export maintains cluster-specific
          fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
        in: query
        name: exact
        schema:
          type: boolean
          uniqueItems: true
      - description: Should this value be exported.  Export strips fields that a user
          can not specify. Deprecated. Planned for removal in 1.18.
        in: query
        name: export
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
      servers: []
    patch:
      description: partially update the specified Service
      operationId: patchCoreV1NamespacedService
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
      servers: []
    put:
      description: replace the specified Service
      operationId: replaceCoreV1NamespacedService
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.Service"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/services/{name}/proxy":
    delete:
      description: connect DELETE requests to proxy of Service
      operationId: connectCoreV1DeleteNamespacedServiceProxy
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
      servers: []
    get:
      description: connect GET requests to proxy of Service
      operationId: connectCoreV1GetNamespacedServiceProxy
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
      servers: []
    head:
      description: connect HEAD requests to proxy of Service
      operationId: connectCoreV1HeadNamespacedServiceProxy
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
      servers: []
    options:
      description: connect OPTIONS requests to proxy of Service
      operationId: connectCoreV1OptionsNamespacedServiceProxy
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
      servers: []
    patch:
      description: connect PATCH requests to proxy of Service
      operationId: connectCoreV1PatchNamespacedServiceProxy
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
      servers: []
    post:
      description: connect POST requests to proxy of Service
      operationId: connectCoreV1PostNamespacedServiceProxy
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
      servers: []
    put:
      description: connect PUT requests to proxy of Service
      operationId: connectCoreV1PutNamespacedServiceProxy
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}":
    delete:
      description: connect DELETE requests to proxy of Service
      operationId: connectCoreV1DeleteNamespacedServiceProxyWithPath
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
      servers: []
    get:
      description: connect GET requests to proxy of Service
      operationId: connectCoreV1GetNamespacedServiceProxyWithPath
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
      servers: []
    head:
      description: connect HEAD requests to proxy of Service
      operationId: connectCoreV1HeadNamespacedServiceProxyWithPath
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
      servers: []
    options:
      description: connect OPTIONS requests to proxy of Service
      operationId: connectCoreV1OptionsNamespacedServiceProxyWithPath
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
      servers: []
    patch:
      description: connect PATCH requests to proxy of Service
      operationId: connectCoreV1PatchNamespacedServiceProxyWithPath
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
      servers: []
    post:
      description: connect POST requests to proxy of Service
      operationId: connectCoreV1PostNamespacedServiceProxyWithPath
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
      servers: []
    put:
      description: connect PUT requests to proxy of Service
      operationId: connectCoreV1PutNamespacedServiceProxyWithPath
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
      servers: []
  "/api/v1/namespaces/{namespace}/services/{name}/status":
    get:
      description: read status of the specified Service
      operationId: readCoreV1NamespacedServiceStatus
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
      servers: []
    patch:
      description: partially update status of the specified Service
      operationId: patchCoreV1NamespacedServiceStatus
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
      servers: []
    put:
      description: replace status of the specified Service
      operationId: replaceCoreV1NamespacedServiceStatus
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.Service"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Service"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
      servers: []
  "/api/v1/namespaces/{name}":
    delete:
      description: delete a Namespace
      operationId: deleteCoreV1Namespace
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
      servers: []
    get:
      description: read the specified Namespace
      operationId: readCoreV1Namespace
      parameters:
      - description: Should the export be exact.  Exact export maintains cluster-specific
          fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
        in: query
        name: exact
        schema:
          type: boolean
          uniqueItems: true
      - description: Should this value be exported.  Export strips fields that a user
          can not specify. Deprecated. Planned for removal in 1.18.
        in: query
        name: export
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
      servers: []
    patch:
      description: partially update the specified Namespace
      operationId: patchCoreV1Namespace
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
      servers: []
    put:
      description: replace the specified Namespace
      operationId: replaceCoreV1Namespace
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.Namespace"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
      servers: []
  "/api/v1/namespaces/{name}/finalize":
    put:
      description: replace finalize of the specified Namespace
      operationId: replaceCoreV1NamespaceFinalize
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.Namespace"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
      servers: []
  "/api/v1/namespaces/{name}/status":
    get:
      description: read status of the specified Namespace
      operationId: readCoreV1NamespaceStatus
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
      servers: []
    patch:
      description: partially update status of the specified Namespace
      operationId: patchCoreV1NamespaceStatus
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
      servers: []
    put:
      description: replace status of the specified Namespace
      operationId: replaceCoreV1NamespaceStatus
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.Namespace"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Namespace"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
      servers: []
  "/api/v1/nodes":
    delete:
      description: delete collection of Node
      operationId: deleteCoreV1CollectionNode
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
      servers: []
    get:
      description: list or watch objects of kind Node
      operationId: listCoreV1Node
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.NodeList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.NodeList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.NodeList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.NodeList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.NodeList"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
      servers: []
    post:
      description: create a Node
      operationId: createCoreV1Node
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.Node"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
      servers: []
  "/api/v1/nodes/{name}":
    delete:
      description: delete a Node
      operationId: deleteCoreV1Node
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
      servers: []
    get:
      description: read the specified Node
      operationId: readCoreV1Node
      parameters:
      - description: Should the export be exact.  Exact export maintains cluster-specific
          fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
        in: query
        name: exact
        schema:
          type: boolean
          uniqueItems: true
      - description: Should this value be exported.  Export strips fields that a user
          can not specify. Deprecated. Planned for removal in 1.18.
        in: query
        name: export
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
      servers: []
    patch:
      description: partially update the specified Node
      operationId: patchCoreV1Node
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
      servers: []
    put:
      description: replace the specified Node
      operationId: replaceCoreV1Node
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.Node"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
      servers: []
  "/api/v1/nodes/{name}/proxy":
    delete:
      description: connect DELETE requests to proxy of Node
      operationId: connectCoreV1DeleteNodeProxy
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
      servers: []
    get:
      description: connect GET requests to proxy of Node
      operationId: connectCoreV1GetNodeProxy
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
      servers: []
    head:
      description: connect HEAD requests to proxy of Node
      operationId: connectCoreV1HeadNodeProxy
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
      servers: []
    options:
      description: connect OPTIONS requests to proxy of Node
      operationId: connectCoreV1OptionsNodeProxy
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
      servers: []
    patch:
      description: connect PATCH requests to proxy of Node
      operationId: connectCoreV1PatchNodeProxy
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
      servers: []
    post:
      description: connect POST requests to proxy of Node
      operationId: connectCoreV1PostNodeProxy
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
      servers: []
    put:
      description: connect PUT requests to proxy of Node
      operationId: connectCoreV1PutNodeProxy
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
      servers: []
  "/api/v1/nodes/{name}/proxy/{path}":
    delete:
      description: connect DELETE requests to proxy of Node
      operationId: connectCoreV1DeleteNodeProxyWithPath
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
      servers: []
    get:
      description: connect GET requests to proxy of Node
      operationId: connectCoreV1GetNodeProxyWithPath
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
      servers: []
    head:
      description: connect HEAD requests to proxy of Node
      operationId: connectCoreV1HeadNodeProxyWithPath
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
      servers: []
    options:
      description: connect OPTIONS requests to proxy of Node
      operationId: connectCoreV1OptionsNodeProxyWithPath
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
      servers: []
    patch:
      description: connect PATCH requests to proxy of Node
      operationId: connectCoreV1PatchNodeProxyWithPath
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
      servers: []
    post:
      description: connect POST requests to proxy of Node
      operationId: connectCoreV1PostNodeProxyWithPath
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
      servers: []
    put:
      description: connect PUT requests to proxy of Node
      operationId: connectCoreV1PutNodeProxyWithPath
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
      servers: []
  "/api/v1/nodes/{name}/status":
    get:
      description: read status of the specified Node
      operationId: readCoreV1NodeStatus
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
      servers: []
    patch:
      description: partially update status of the specified Node
      operationId: patchCoreV1NodeStatus
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
      servers: []
    put:
      description: replace status of the specified Node
      operationId: replaceCoreV1NodeStatus
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.Node"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.Node"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
      servers: []
  "/api/v1/persistentvolumeclaims":
    get:
      description: list or watch objects of kind PersistentVolumeClaim
      operationId: listCoreV1PersistentVolumeClaimForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimList"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
      servers: []
  "/api/v1/persistentvolumes":
    delete:
      description: delete collection of PersistentVolume
      operationId: deleteCoreV1CollectionPersistentVolume
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
      servers: []
    get:
      description: list or watch objects of kind PersistentVolume
      operationId: listCoreV1PersistentVolume
      parameters:
      - description: |-
          allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

          This field is beta.
        in: query
        name: allowWatchBookmarks
        schema:
          type: boolean
          uniqueItems: true
      - description: |-
          The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

          This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
        in: query
        name: continue
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          fields. Defaults to everything.
        in: query
        name: fieldSelector
        schema:
          type: string
          uniqueItems: true
      - description: A selector to restrict the list of returned objects by their
          labels. Defaults to everything.
        in: query
        name: labelSelector
        schema:
          type: string
          uniqueItems: true
      - description: |-
          limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

          The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
        in: query
        name: limit
        schema:
          type: integer
          uniqueItems: true
      - description: 'When specified with a watch call, shows changes that occur after
          that particular version of a resource. Defaults to changes from the beginning
          of history. When specified for list: - if unset, then the result is returned
          from remote storage based on quorum-read flag; - if it''s 0, then we simply
          return what we currently have in cache, no guarantee; - if set to non zero,
          then the result is at least as fresh as given rv.'
        in: query
        name: resourceVersion
        schema:
          type: string
          uniqueItems: true
      - description: Timeout for the list/watch call. This limits the duration of
          the call, regardless of any activity or inactivity.
        in: query
        name: timeoutSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: Watch for changes to the described resources and return them
          as a stream of add, update, and remove notifications. Specify resourceVersion.
        in: query
        name: watch
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolumeList"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
      servers: []
    post:
      description: create a PersistentVolume
      operationId: createCoreV1PersistentVolume
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.PersistentVolume"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
      servers: []
  "/api/v1/persistentvolumes/{name}":
    delete:
      description: delete a PersistentVolume
      operationId: deleteCoreV1PersistentVolume
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: The duration in seconds before the object should be deleted.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will
          be used. Defaults to a per object value if not specified. zero means delete
          immediately.
        in: query
        name: gracePeriodSeconds
        schema:
          type: integer
          uniqueItems: true
      - description: 'Deprecated: please use the PropagationPolicy, this field will
          be deprecated in 1.7. Should the dependent objects be orphaned. If true/false,
          the "orphan" finalizer will be added to/removed from the object''s finalizers
          list. Either this field or PropagationPolicy may be set, but not both.'
        in: query
        name: orphanDependents
        schema:
          type: boolean
          uniqueItems: true
      - description: 'Whether and how garbage collection will be performed. Either
          this field or OrphanDependents may be set, but not both. The default policy
          is decided by the existing finalizer set in the metadata.finalizers and
          the resource-specific default policy. Acceptable values are: ''Orphan''
          - orphan the dependents; ''Background'' - allow the garbage collector to
          delete the dependents in the background; ''Foreground'' - a cascading policy
          that deletes all dependents in the foreground.'
        in: query
        name: propagationPolicy
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
      servers: []
    get:
      description: read the specified PersistentVolume
      operationId: readCoreV1PersistentVolume
      parameters:
      - description: Should the export be exact.  Exact export maintains cluster-specific
          fields like 'Namespace'. Deprecated. Planned for removal in 1.18.
        in: query
        name: exact
        schema:
          type: boolean
          uniqueItems: true
      - description: Should this value be exported.  Export strips fields that a user
          can not specify. Deprecated. Planned for removal in 1.18.
        in: query
        name: export
        schema:
          type: boolean
          uniqueItems: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
      servers: []
    patch:
      description: partially update the specified PersistentVolume
      operationId: patchCoreV1PersistentVolume
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
      servers: []
    put:
      description: replace the specified PersistentVolume
      operationId: replaceCoreV1PersistentVolume
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.PersistentVolume"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
      servers: []
  "/api/v1/persistentvolumes/{name}/status":
    get:
      description: read status of the specified PersistentVolume
      operationId: readCoreV1PersistentVolumeStatus
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
      servers: []
    patch:
      description: partially update status of the specified PersistentVolume
      operationId: patchCoreV1PersistentVolumeStatus
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
          This field is required for apply requests (application/apply-patch) but
          optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      - description: Force is going to "force" Apply requests. It means user will
          re-acquire conflicting fields owned by other people. Force flag must be
          unset for non-apply patch requests.
        in: query
        name: force
        schema:
          type: boolean
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
      servers: []
    put:
      description: replace status of the specified PersistentVolume
      operationId: replaceCoreV1PersistentVolumeStatus
      parameters:
      - description: 'When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response
          and no further processing of the request. Valid values are: - All: all dry
          run stages will be processed'
        in: query
        name: dryRun
        schema:
          type: string
          uniqueItems: true
      - description: fieldManager is a name associated with the actor or entity that
          is making these changes. The value must be less than or 128 characters long,
          and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        in: query
        name: fieldManager
        schema:
          type: string
          uniqueItems: true
      requestBody:
        "$ref": "#/components/requestBodies/io.k8s.api.core.v1.PersistentVolume"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PersistentVolume"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
      servers: []
  "/api/v1/pods":
    get:
      description: list or watch objects of kind Pod
      operationId: listCoreV1PodForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodList"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
      servers: []
  "/api/v1/podtemplates":
    get:
      description: list or watch objects of kind PodTemplate
      operationId: listCoreV1PodTemplateForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplateList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplateList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplateList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplateList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.PodTemplateList"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodTemplate
        version: v1
      servers: []
  "/api/v1/replicationcontrollers":
    get:
      description: list or watch objects of kind ReplicationController
      operationId: listCoreV1ReplicationControllerForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationControllerList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationControllerList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationControllerList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationControllerList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ReplicationControllerList"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
      servers: []
  "/api/v1/resourcequotas":
    get:
      description: list or watch objects of kind ResourceQuota
      operationId: listCoreV1ResourceQuotaForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuotaList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuotaList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuotaList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuotaList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ResourceQuotaList"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
      servers: []
  "/api/v1/secrets":
    get:
      description: list or watch objects of kind Secret
      operationId: listCoreV1SecretForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.SecretList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.SecretList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.SecretList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.SecretList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.SecretList"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Secret
        version: v1
      servers: []
  "/api/v1/serviceaccounts":
    get:
      description: list or watch objects of kind ServiceAccount
      operationId: listCoreV1ServiceAccountForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccountList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccountList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccountList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccountList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceAccountList"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceAccount
        version: v1
      servers: []
  "/api/v1/services":
    get:
      description: list or watch objects of kind Service
      operationId: listCoreV1ServiceForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceList"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceList"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceList"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceList"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.api.core.v1.ServiceList"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
      servers: []
  "/api/v1/watch/configmaps":
    get:
      description: 'watch individual changes to a list of ConfigMap. deprecated: use
        the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1ConfigMapListForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: ConfigMap
        version: v1
      servers: []
  "/api/v1/watch/endpoints":
    get:
      description: 'watch individual changes to a list of Endpoints. deprecated: use
        the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1EndpointsListForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: Endpoints
        version: v1
      servers: []
  "/api/v1/watch/events":
    get:
      description: 'watch individual changes to a list of Event. deprecated: use the
        ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1EventListForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: Event
        version: v1
      servers: []
  "/api/v1/watch/limitranges":
    get:
      description: 'watch individual changes to a list of LimitRange. deprecated:
        use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1LimitRangeListForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: LimitRange
        version: v1
      servers: []
  "/api/v1/watch/namespaces":
    get:
      description: 'watch individual changes to a list of Namespace. deprecated: use
        the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1NamespaceList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
      servers: []
  "/api/v1/watch/namespaces/{namespace}/configmaps":
    get:
      description: 'watch individual changes to a list of ConfigMap. deprecated: use
        the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1NamespacedConfigMapList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: ConfigMap
        version: v1
      servers: []
  "/api/v1/watch/namespaces/{namespace}/configmaps/{name}":
    get:
      description: 'watch changes to an object of kind ConfigMap. deprecated: use
        the ''watch'' parameter with a list operation instead, filtered to a single
        item with the ''fieldSelector'' parameter.'
      operationId: watchCoreV1NamespacedConfigMap
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: ''
        kind: ConfigMap
        version: v1
      servers: []
  "/api/v1/watch/namespaces/{namespace}/endpoints":
    get:
      description: 'watch individual changes to a list of Endpoints. deprecated: use
        the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1NamespacedEndpointsList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: Endpoints
        version: v1
      servers: []
  "/api/v1/watch/namespaces/{namespace}/endpoints/{name}":
    get:
      description: 'watch changes to an object of kind Endpoints. deprecated: use
        the ''watch'' parameter with a list operation instead, filtered to a single
        item with the ''fieldSelector'' parameter.'
      operationId: watchCoreV1NamespacedEndpoints
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Endpoints
        version: v1
      servers: []
  "/api/v1/watch/namespaces/{namespace}/events":
    get:
      description: 'watch individual changes to a list of Event. deprecated: use the
        ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1NamespacedEventList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: Event
        version: v1
      servers: []
  "/api/v1/watch/namespaces/{namespace}/events/{name}":
    get:
      description: 'watch changes to an object of kind Event. deprecated: use the
        ''watch'' parameter with a list operation instead, filtered to a single item
        with the ''fieldSelector'' parameter.'
      operationId: watchCoreV1NamespacedEvent
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Event
        version: v1
      servers: []
  "/api/v1/watch/namespaces/{namespace}/limitranges":
    get:
      description: 'watch individual changes to a list of LimitRange. deprecated:
        use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1NamespacedLimitRangeList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: LimitRange
        version: v1
      servers: []
  "/api/v1/watch/namespaces/{namespace}/limitranges/{name}":
    get:
      description: 'watch changes to an object of kind LimitRange. deprecated: use
        the ''watch'' parameter with a list operation instead, filtered to a single
        item with the ''fieldSelector'' parameter.'
      operationId: watchCoreV1NamespacedLimitRange
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: ''
        kind: LimitRange
        version: v1
      servers: []
  "/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims":
    get:
      description: 'watch individual changes to a list of PersistentVolumeClaim. deprecated:
        use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1NamespacedPersistentVolumeClaimList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
      servers: []
  "/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims/{name}":
    get:
      description: 'watch changes to an object of kind PersistentVolumeClaim. deprecated:
        use the ''watch'' parameter with a list operation instead, filtered to a single
        item with the ''fieldSelector'' parameter.'
      operationId: watchCoreV1NamespacedPersistentVolumeClaim
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
      servers: []
  "/api/v1/watch/namespaces/{namespace}/pods":
    get:
      description: 'watch individual changes to a list of Pod. deprecated: use the
        ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1NamespacedPodList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
      servers: []
  "/api/v1/watch/namespaces/{namespace}/pods/{name}":
    get:
      description: 'watch changes to an object of kind Pod. deprecated: use the ''watch''
        parameter with a list operation instead, filtered to a single item with the
        ''fieldSelector'' parameter.'
      operationId: watchCoreV1NamespacedPod
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
      servers: []
  "/api/v1/watch/namespaces/{namespace}/podtemplates":
    get:
      description: 'watch individual changes to a list of PodTemplate. deprecated:
        use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1NamespacedPodTemplateList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodTemplate
        version: v1
      servers: []
  "/api/v1/watch/namespaces/{namespace}/podtemplates/{name}":
    get:
      description: 'watch changes to an object of kind PodTemplate. deprecated: use
        the ''watch'' parameter with a list operation instead, filtered to a single
        item with the ''fieldSelector'' parameter.'
      operationId: watchCoreV1NamespacedPodTemplate
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodTemplate
        version: v1
      servers: []
  "/api/v1/watch/namespaces/{namespace}/replicationcontrollers":
    get:
      description: 'watch individual changes to a list of ReplicationController. deprecated:
        use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1NamespacedReplicationControllerList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
      servers: []
  "/api/v1/watch/namespaces/{namespace}/replicationcontrollers/{name}":
    get:
      description: 'watch changes to an object of kind ReplicationController. deprecated:
        use the ''watch'' parameter with a list operation instead, filtered to a single
        item with the ''fieldSelector'' parameter.'
      operationId: watchCoreV1NamespacedReplicationController
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
      servers: []
  "/api/v1/watch/namespaces/{namespace}/resourcequotas":
    get:
      description: 'watch individual changes to a list of ResourceQuota. deprecated:
        use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1NamespacedResourceQuotaList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
      servers: []
  "/api/v1/watch/namespaces/{namespace}/resourcequotas/{name}":
    get:
      description: 'watch changes to an object of kind ResourceQuota. deprecated:
        use the ''watch'' parameter with a list operation instead, filtered to a single
        item with the ''fieldSelector'' parameter.'
      operationId: watchCoreV1NamespacedResourceQuota
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
      servers: []
  "/api/v1/watch/namespaces/{namespace}/secrets":
    get:
      description: 'watch individual changes to a list of Secret. deprecated: use
        the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1NamespacedSecretList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: Secret
        version: v1
      servers: []
  "/api/v1/watch/namespaces/{namespace}/secrets/{name}":
    get:
      description: 'watch changes to an object of kind Secret. deprecated: use the
        ''watch'' parameter with a list operation instead, filtered to a single item
        with the ''fieldSelector'' parameter.'
      operationId: watchCoreV1NamespacedSecret
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Secret
        version: v1
      servers: []
  "/api/v1/watch/namespaces/{namespace}/serviceaccounts":
    get:
      description: 'watch individual changes to a list of ServiceAccount. deprecated:
        use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1NamespacedServiceAccountList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceAccount
        version: v1
      servers: []
  "/api/v1/watch/namespaces/{namespace}/serviceaccounts/{name}":
    get:
      description: 'watch changes to an object of kind ServiceAccount. deprecated:
        use the ''watch'' parameter with a list operation instead, filtered to a single
        item with the ''fieldSelector'' parameter.'
      operationId: watchCoreV1NamespacedServiceAccount
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceAccount
        version: v1
      servers: []
  "/api/v1/watch/namespaces/{namespace}/services":
    get:
      description: 'watch individual changes to a list of Service. deprecated: use
        the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1NamespacedServiceList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
      servers: []
  "/api/v1/watch/namespaces/{namespace}/services/{name}":
    get:
      description: 'watch changes to an object of kind Service. deprecated: use the
        ''watch'' parameter with a list operation instead, filtered to a single item
        with the ''fieldSelector'' parameter.'
      operationId: watchCoreV1NamespacedService
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
      servers: []
  "/api/v1/watch/namespaces/{name}":
    get:
      description: 'watch changes to an object of kind Namespace. deprecated: use
        the ''watch'' parameter with a list operation instead, filtered to a single
        item with the ''fieldSelector'' parameter.'
      operationId: watchCoreV1Namespace
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
      servers: []
  "/api/v1/watch/nodes":
    get:
      description: 'watch individual changes to a list of Node. deprecated: use the
        ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1NodeList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
      servers: []
  "/api/v1/watch/nodes/{name}":
    get:
      description: 'watch changes to an object of kind Node. deprecated: use the ''watch''
        parameter with a list operation instead, filtered to a single item with the
        ''fieldSelector'' parameter.'
      operationId: watchCoreV1Node
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
      servers: []
  "/api/v1/watch/persistentvolumeclaims":
    get:
      description: 'watch individual changes to a list of PersistentVolumeClaim. deprecated:
        use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1PersistentVolumeClaimListForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
      servers: []
  "/api/v1/watch/persistentvolumes":
    get:
      description: 'watch individual changes to a list of PersistentVolume. deprecated:
        use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1PersistentVolumeList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
      servers: []
  "/api/v1/watch/persistentvolumes/{name}":
    get:
      description: 'watch changes to an object of kind PersistentVolume. deprecated:
        use the ''watch'' parameter with a list operation instead, filtered to a single
        item with the ''fieldSelector'' parameter.'
      operationId: watchCoreV1PersistentVolume
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watch
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
      servers: []
  "/api/v1/watch/pods":
    get:
      description: 'watch individual changes to a list of Pod. deprecated: use the
        ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1PodListForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
      servers: []
  "/api/v1/watch/podtemplates":
    get:
      description: 'watch individual changes to a list of PodTemplate. deprecated:
        use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1PodTemplateListForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodTemplate
        version: v1
      servers: []
  "/api/v1/watch/replicationcontrollers":
    get:
      description: 'watch individual changes to a list of ReplicationController. deprecated:
        use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1ReplicationControllerListForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
      servers: []
  "/api/v1/watch/resourcequotas":
    get:
      description: 'watch individual changes to a list of ResourceQuota. deprecated:
        use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1ResourceQuotaListForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
      servers: []
  "/api/v1/watch/secrets":
    get:
      description: 'watch individual changes to a list of Secret. deprecated: use
        the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1SecretListForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: Secret
        version: v1
      servers: []
  "/api/v1/watch/serviceaccounts":
    get:
      description: 'watch individual changes to a list of ServiceAccount. deprecated:
        use the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1ServiceAccountListForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceAccount
        version: v1
      servers: []
  "/api/v1/watch/services":
    get:
      description: 'watch individual changes to a list of Service. deprecated: use
        the ''watch'' parameter with a list operation instead.'
      operationId: watchCoreV1ServiceListForAllNamespaces
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/yaml:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/json;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            application/vnd.kubernetes.protobuf;stream=watch:
              schema:
                "$ref": "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
        '401':
          description: Unauthorized
      tags:
      - core_v1
      x-kubernetes-action: watchlist
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
      servers: []
