---
paths:
  "/api/v1/componentstatuses":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/componentstatuses/{name}":
    parameters:
    - description: name of the ComponentStatus
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/configmaps":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/endpoints":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/events":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/limitranges":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/namespaces":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/bindings":
    parameters:
    - description: 'When present, indicates that modifications should not be persisted.
        An invalid or unrecognized dryRun directive will result in an error response
        and no further processing of the request. Valid values are: - All: all dry
        run stages will be processed'
      in: query
      name: dryRun
      schema:
        type: string
        uniqueItems: true
    - description: fieldManager is a name associated with the actor or entity that
        is making these changes. The value must be less than or 128 characters long,
        and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
      in: query
      name: fieldManager
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/configmaps":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/configmaps/{name}":
    parameters:
    - description: name of the ConfigMap
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/endpoints":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/endpoints/{name}":
    parameters:
    - description: name of the Endpoints
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/events":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/events/{name}":
    parameters:
    - description: name of the Event
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/limitranges":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/limitranges/{name}":
    parameters:
    - description: name of the LimitRange
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/persistentvolumeclaims":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}":
    parameters:
    - description: name of the PersistentVolumeClaim
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status":
    parameters:
    - description: name of the PersistentVolumeClaim
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/pods":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/pods/{name}":
    parameters:
    - description: name of the Pod
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/pods/{name}/attach":
    parameters:
    - description: The container in which to execute the command. Defaults to only
        container if there is only one container in the pod.
      in: query
      name: container
      schema:
        type: string
        uniqueItems: true
    - description: name of the PodAttachOptions
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: Stderr if true indicates that stderr is to be redirected for the
        attach call. Defaults to true.
      in: query
      name: stderr
      schema:
        type: boolean
        uniqueItems: true
    - description: Stdin if true, redirects the standard input stream of the pod for
        this call. Defaults to false.
      in: query
      name: stdin
      schema:
        type: boolean
        uniqueItems: true
    - description: Stdout if true indicates that stdout is to be redirected for the
        attach call. Defaults to true.
      in: query
      name: stdout
      schema:
        type: boolean
        uniqueItems: true
    - description: TTY if true indicates that a tty will be allocated for the attach
        call. This is passed through the container runtime so the tty is allocated
        on the worker node by the container runtime. Defaults to false.
      in: query
      name: tty
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/pods/{name}/binding":
    parameters:
    - description: 'When present, indicates that modifications should not be persisted.
        An invalid or unrecognized dryRun directive will result in an error response
        and no further processing of the request. Valid values are: - All: all dry
        run stages will be processed'
      in: query
      name: dryRun
      schema:
        type: string
        uniqueItems: true
    - description: fieldManager is a name associated with the actor or entity that
        is making these changes. The value must be less than or 128 characters long,
        and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
      in: query
      name: fieldManager
      schema:
        type: string
        uniqueItems: true
    - description: name of the Binding
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/pods/{name}/eviction":
    parameters:
    - description: 'When present, indicates that modifications should not be persisted.
        An invalid or unrecognized dryRun directive will result in an error response
        and no further processing of the request. Valid values are: - All: all dry
        run stages will be processed'
      in: query
      name: dryRun
      schema:
        type: string
        uniqueItems: true
    - description: fieldManager is a name associated with the actor or entity that
        is making these changes. The value must be less than or 128 characters long,
        and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
      in: query
      name: fieldManager
      schema:
        type: string
        uniqueItems: true
    - description: name of the Eviction
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/pods/{name}/exec":
    parameters:
    - description: Command is the remote command to execute. argv array. Not executed
        within a shell.
      in: query
      name: command
      schema:
        type: string
        uniqueItems: true
    - description: Container in which to execute the command. Defaults to only container
        if there is only one container in the pod.
      in: query
      name: container
      schema:
        type: string
        uniqueItems: true
    - description: name of the PodExecOptions
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: Redirect the standard error stream of the pod for this call. Defaults
        to true.
      in: query
      name: stderr
      schema:
        type: boolean
        uniqueItems: true
    - description: Redirect the standard input stream of the pod for this call. Defaults
        to false.
      in: query
      name: stdin
      schema:
        type: boolean
        uniqueItems: true
    - description: Redirect the standard output stream of the pod for this call. Defaults
        to true.
      in: query
      name: stdout
      schema:
        type: boolean
        uniqueItems: true
    - description: TTY if true indicates that a tty will be allocated for the exec
        call. Defaults to false.
      in: query
      name: tty
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/pods/{name}/log":
    parameters:
    - description: The container for which to stream logs. Defaults to only container
        if there is one container in the pod.
      in: query
      name: container
      schema:
        type: string
        uniqueItems: true
    - description: Follow the log stream of the pod. Defaults to false.
      in: query
      name: follow
      schema:
        type: boolean
        uniqueItems: true
    - description: If set, the number of bytes to read from the server before terminating
        the log output. This may not display a complete final line of logging, and
        may return slightly more or slightly less than the specified limit.
      in: query
      name: limitBytes
      schema:
        type: integer
        uniqueItems: true
    - description: name of the Pod
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: Return previous terminated container logs. Defaults to false.
      in: query
      name: previous
      schema:
        type: boolean
        uniqueItems: true
    - description: A relative time in seconds before the current time from which to
        show logs. If this value precedes the time a pod was started, only logs since
        the pod start will be returned. If this value is in the future, no logs will
        be returned. Only one of sinceSeconds or sinceTime may be specified.
      in: query
      name: sinceSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: If set, the number of lines from the end of the logs to show. If
        not specified, logs are shown from the creation of the container or sinceSeconds
        or sinceTime
      in: query
      name: tailLines
      schema:
        type: integer
        uniqueItems: true
    - description: If true, add an RFC3339 or RFC3339Nano timestamp at the beginning
        of every line of log output. Defaults to false.
      in: query
      name: timestamps
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/pods/{name}/portforward":
    parameters:
    - description: name of the PodPortForwardOptions
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: List of ports to forward Required when using WebSockets
      in: query
      name: ports
      schema:
        type: integer
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/pods/{name}/proxy":
    parameters:
    - description: name of the PodProxyOptions
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: Path is the URL path to use for the current proxy request to pod.
      in: query
      name: path
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}":
    parameters:
    - description: name of the PodProxyOptions
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: path to the resource
      in: path
      name: path
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: Path is the URL path to use for the current proxy request to pod.
      in: query
      name: path
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/pods/{name}/status":
    parameters:
    - description: name of the Pod
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/podtemplates":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/podtemplates/{name}":
    parameters:
    - description: name of the PodTemplate
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/replicationcontrollers":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}":
    parameters:
    - description: name of the ReplicationController
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale":
    parameters:
    - description: name of the Scale
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status":
    parameters:
    - description: name of the ReplicationController
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/resourcequotas":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/resourcequotas/{name}":
    parameters:
    - description: name of the ResourceQuota
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/resourcequotas/{name}/status":
    parameters:
    - description: name of the ResourceQuota
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/secrets":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/secrets/{name}":
    parameters:
    - description: name of the Secret
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/serviceaccounts":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/serviceaccounts/{name}":
    parameters:
    - description: name of the ServiceAccount
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/serviceaccounts/{name}/token":
    parameters:
    - description: 'When present, indicates that modifications should not be persisted.
        An invalid or unrecognized dryRun directive will result in an error response
        and no further processing of the request. Valid values are: - All: all dry
        run stages will be processed'
      in: query
      name: dryRun
      schema:
        type: string
        uniqueItems: true
    - description: fieldManager is a name associated with the actor or entity that
        is making these changes. The value must be less than or 128 characters long,
        and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
      in: query
      name: fieldManager
      schema:
        type: string
        uniqueItems: true
    - description: name of the TokenRequest
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/services":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/services/{name}":
    parameters:
    - description: name of the Service
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/services/{name}/proxy":
    parameters:
    - description: name of the ServiceProxyOptions
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: Path is the part of URLs that include service endpoints, suffixes,
        and parameters to use for the current proxy request to service. For example,
        the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
        Path is _search?q=user:kimchy.
      in: query
      name: path
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}":
    parameters:
    - description: name of the ServiceProxyOptions
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: path to the resource
      in: path
      name: path
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: Path is the part of URLs that include service endpoints, suffixes,
        and parameters to use for the current proxy request to service. For example,
        the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy.
        Path is _search?q=user:kimchy.
      in: query
      name: path
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{namespace}/services/{name}/status":
    parameters:
    - description: name of the Service
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{name}":
    parameters:
    - description: name of the Namespace
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{name}/finalize":
    parameters:
    - description: 'When present, indicates that modifications should not be persisted.
        An invalid or unrecognized dryRun directive will result in an error response
        and no further processing of the request. Valid values are: - All: all dry
        run stages will be processed'
      in: query
      name: dryRun
      schema:
        type: string
        uniqueItems: true
    - description: fieldManager is a name associated with the actor or entity that
        is making these changes. The value must be less than or 128 characters long,
        and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
      in: query
      name: fieldManager
      schema:
        type: string
        uniqueItems: true
    - description: name of the Namespace
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/namespaces/{name}/status":
    parameters:
    - description: name of the Namespace
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/nodes":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/nodes/{name}":
    parameters:
    - description: name of the Node
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/nodes/{name}/proxy":
    parameters:
    - description: name of the NodeProxyOptions
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: Path is the URL path to use for the current proxy request to node.
      in: query
      name: path
      schema:
        type: string
        uniqueItems: true
  "/api/v1/nodes/{name}/proxy/{path}":
    parameters:
    - description: name of the NodeProxyOptions
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: path to the resource
      in: path
      name: path
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: Path is the URL path to use for the current proxy request to node.
      in: query
      name: path
      schema:
        type: string
        uniqueItems: true
  "/api/v1/nodes/{name}/status":
    parameters:
    - description: name of the Node
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/persistentvolumeclaims":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/persistentvolumes":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/persistentvolumes/{name}":
    parameters:
    - description: name of the PersistentVolume
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/persistentvolumes/{name}/status":
    parameters:
    - description: name of the PersistentVolume
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/api/v1/pods":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/podtemplates":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/replicationcontrollers":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/resourcequotas":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/secrets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/serviceaccounts":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/services":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/configmaps":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/endpoints":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/events":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/limitranges":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/namespaces":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/namespaces/{namespace}/configmaps":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/namespaces/{namespace}/configmaps/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the ConfigMap
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/namespaces/{namespace}/endpoints":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/namespaces/{namespace}/endpoints/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the Endpoints
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/namespaces/{namespace}/events":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/namespaces/{namespace}/events/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the Event
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/namespaces/{namespace}/limitranges":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/namespaces/{namespace}/limitranges/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the LimitRange
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the PersistentVolumeClaim
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/namespaces/{namespace}/pods":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/namespaces/{namespace}/pods/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the Pod
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/namespaces/{namespace}/podtemplates":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/namespaces/{namespace}/podtemplates/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the PodTemplate
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/namespaces/{namespace}/replicationcontrollers":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/namespaces/{namespace}/replicationcontrollers/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the ReplicationController
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/namespaces/{namespace}/resourcequotas":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/namespaces/{namespace}/resourcequotas/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the ResourceQuota
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/namespaces/{namespace}/secrets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/namespaces/{namespace}/secrets/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the Secret
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/namespaces/{namespace}/serviceaccounts":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/namespaces/{namespace}/serviceaccounts/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the ServiceAccount
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/namespaces/{namespace}/services":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/namespaces/{namespace}/services/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the Service
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/namespaces/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the Namespace
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/nodes":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/nodes/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the Node
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/persistentvolumeclaims":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/persistentvolumes":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/persistentvolumes/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the PersistentVolume
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/pods":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/podtemplates":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/replicationcontrollers":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/resourcequotas":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/secrets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/serviceaccounts":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/api/v1/watch/services":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/{name}":
    parameters:
    - description: name of the MutatingWebhookConfiguration
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/{name}":
    parameters:
    - description: name of the ValidatingWebhookConfiguration
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/admissionregistration.k8s.io/v1/watch/mutatingwebhookconfigurations":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/admissionregistration.k8s.io/v1/watch/mutatingwebhookconfigurations/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the MutatingWebhookConfiguration
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/admissionregistration.k8s.io/v1/watch/validatingwebhookconfigurations":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/admissionregistration.k8s.io/v1/watch/validatingwebhookconfigurations/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the ValidatingWebhookConfiguration
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations/{name}":
    parameters:
    - description: name of the MutatingWebhookConfiguration
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations/{name}":
    parameters:
    - description: name of the ValidatingWebhookConfiguration
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/admissionregistration.k8s.io/v1beta1/watch/mutatingwebhookconfigurations":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/admissionregistration.k8s.io/v1beta1/watch/mutatingwebhookconfigurations/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the MutatingWebhookConfiguration
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/admissionregistration.k8s.io/v1beta1/watch/validatingwebhookconfigurations":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/admissionregistration.k8s.io/v1beta1/watch/validatingwebhookconfigurations/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the ValidatingWebhookConfiguration
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apiextensions.k8s.io/v1/customresourcedefinitions":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}":
    parameters:
    - description: name of the CustomResourceDefinition
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}/status":
    parameters:
    - description: name of the CustomResourceDefinition
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apiextensions.k8s.io/v1/watch/customresourcedefinitions":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apiextensions.k8s.io/v1/watch/customresourcedefinitions/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the CustomResourceDefinition
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}":
    parameters:
    - description: name of the CustomResourceDefinition
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}/status":
    parameters:
    - description: name of the CustomResourceDefinition
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apiextensions.k8s.io/v1beta1/watch/customresourcedefinitions":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apiextensions.k8s.io/v1beta1/watch/customresourcedefinitions/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the CustomResourceDefinition
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apiregistration.k8s.io/v1/apiservices":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apiregistration.k8s.io/v1/apiservices/{name}":
    parameters:
    - description: name of the APIService
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apiregistration.k8s.io/v1/apiservices/{name}/status":
    parameters:
    - description: name of the APIService
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apiregistration.k8s.io/v1/watch/apiservices":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apiregistration.k8s.io/v1/watch/apiservices/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the APIService
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apiregistration.k8s.io/v1beta1/apiservices":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apiregistration.k8s.io/v1beta1/apiservices/{name}":
    parameters:
    - description: name of the APIService
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apiregistration.k8s.io/v1beta1/apiservices/{name}/status":
    parameters:
    - description: name of the APIService
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apiregistration.k8s.io/v1beta1/watch/apiservices":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apiregistration.k8s.io/v1beta1/watch/apiservices/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the APIService
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1/controllerrevisions":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1/daemonsets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1/deployments":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1/namespaces/{namespace}/controllerrevisions":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}":
    parameters:
    - description: name of the ControllerRevision
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1/namespaces/{namespace}/daemonsets":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}":
    parameters:
    - description: name of the DaemonSet
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status":
    parameters:
    - description: name of the DaemonSet
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1/namespaces/{namespace}/deployments":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1/namespaces/{namespace}/deployments/{name}":
    parameters:
    - description: name of the Deployment
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale":
    parameters:
    - description: name of the Scale
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1/namespaces/{namespace}/deployments/{name}/status":
    parameters:
    - description: name of the Deployment
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1/namespaces/{namespace}/replicasets":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1/namespaces/{namespace}/replicasets/{name}":
    parameters:
    - description: name of the ReplicaSet
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale":
    parameters:
    - description: name of the Scale
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status":
    parameters:
    - description: name of the ReplicaSet
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1/namespaces/{namespace}/statefulsets":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}":
    parameters:
    - description: name of the StatefulSet
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale":
    parameters:
    - description: name of the Scale
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status":
    parameters:
    - description: name of the StatefulSet
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1/replicasets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1/statefulsets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1/watch/controllerrevisions":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1/watch/daemonsets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1/watch/deployments":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1/watch/namespaces/{namespace}/controllerrevisions":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1/watch/namespaces/{namespace}/controllerrevisions/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the ControllerRevision
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1/watch/namespaces/{namespace}/daemonsets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1/watch/namespaces/{namespace}/daemonsets/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the DaemonSet
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1/watch/namespaces/{namespace}/deployments":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1/watch/namespaces/{namespace}/deployments/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the Deployment
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1/watch/namespaces/{namespace}/replicasets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1/watch/namespaces/{namespace}/replicasets/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the ReplicaSet
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1/watch/namespaces/{namespace}/statefulsets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1/watch/namespaces/{namespace}/statefulsets/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the StatefulSet
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1/watch/replicasets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1/watch/statefulsets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1beta1/controllerrevisions":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1beta1/deployments":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1beta1/namespaces/{namespace}/controllerrevisions/{name}":
    parameters:
    - description: name of the ControllerRevision
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1beta1/namespaces/{namespace}/deployments":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}":
    parameters:
    - description: name of the Deployment
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/rollback":
    parameters:
    - description: 'When present, indicates that modifications should not be persisted.
        An invalid or unrecognized dryRun directive will result in an error response
        and no further processing of the request. Valid values are: - All: all dry
        run stages will be processed'
      in: query
      name: dryRun
      schema:
        type: string
        uniqueItems: true
    - description: fieldManager is a name associated with the actor or entity that
        is making these changes. The value must be less than or 128 characters long,
        and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
      in: query
      name: fieldManager
      schema:
        type: string
        uniqueItems: true
    - description: name of the DeploymentRollback
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/scale":
    parameters:
    - description: name of the Scale
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1beta1/namespaces/{namespace}/deployments/{name}/status":
    parameters:
    - description: name of the Deployment
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1beta1/namespaces/{namespace}/statefulsets":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}":
    parameters:
    - description: name of the StatefulSet
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/scale":
    parameters:
    - description: name of the Scale
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1beta1/namespaces/{namespace}/statefulsets/{name}/status":
    parameters:
    - description: name of the StatefulSet
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1beta1/statefulsets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1beta1/watch/controllerrevisions":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1beta1/watch/deployments":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1beta1/watch/namespaces/{namespace}/controllerrevisions":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1beta1/watch/namespaces/{namespace}/controllerrevisions/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the ControllerRevision
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1beta1/watch/namespaces/{namespace}/deployments":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1beta1/watch/namespaces/{namespace}/deployments/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the Deployment
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1beta1/watch/namespaces/{namespace}/statefulsets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1beta1/watch/namespaces/{namespace}/statefulsets/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the StatefulSet
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1beta1/watch/statefulsets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1beta2/controllerrevisions":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1beta2/daemonsets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1beta2/deployments":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1beta2/namespaces/{namespace}/controllerrevisions":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1beta2/namespaces/{namespace}/controllerrevisions/{name}":
    parameters:
    - description: name of the ControllerRevision
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1beta2/namespaces/{namespace}/daemonsets":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1beta2/namespaces/{namespace}/daemonsets/{name}":
    parameters:
    - description: name of the DaemonSet
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1beta2/namespaces/{namespace}/daemonsets/{name}/status":
    parameters:
    - description: name of the DaemonSet
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1beta2/namespaces/{namespace}/deployments":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}":
    parameters:
    - description: name of the Deployment
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}/scale":
    parameters:
    - description: name of the Scale
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1beta2/namespaces/{namespace}/deployments/{name}/status":
    parameters:
    - description: name of the Deployment
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1beta2/namespaces/{namespace}/replicasets":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}":
    parameters:
    - description: name of the ReplicaSet
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}/scale":
    parameters:
    - description: name of the Scale
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1beta2/namespaces/{namespace}/replicasets/{name}/status":
    parameters:
    - description: name of the ReplicaSet
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1beta2/namespaces/{namespace}/statefulsets":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}":
    parameters:
    - description: name of the StatefulSet
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}/scale":
    parameters:
    - description: name of the Scale
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1beta2/namespaces/{namespace}/statefulsets/{name}/status":
    parameters:
    - description: name of the StatefulSet
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/apps/v1beta2/replicasets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1beta2/statefulsets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1beta2/watch/controllerrevisions":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1beta2/watch/daemonsets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1beta2/watch/deployments":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1beta2/watch/namespaces/{namespace}/controllerrevisions":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1beta2/watch/namespaces/{namespace}/controllerrevisions/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the ControllerRevision
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1beta2/watch/namespaces/{namespace}/daemonsets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1beta2/watch/namespaces/{namespace}/daemonsets/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the DaemonSet
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1beta2/watch/namespaces/{namespace}/deployments":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1beta2/watch/namespaces/{namespace}/deployments/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the Deployment
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1beta2/watch/namespaces/{namespace}/replicasets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1beta2/watch/namespaces/{namespace}/replicasets/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the ReplicaSet
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1beta2/watch/namespaces/{namespace}/statefulsets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1beta2/watch/namespaces/{namespace}/statefulsets/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the StatefulSet
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1beta2/watch/replicasets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/apps/v1beta2/watch/statefulsets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/auditregistration.k8s.io/v1alpha1/auditsinks":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/auditregistration.k8s.io/v1alpha1/auditsinks/{name}":
    parameters:
    - description: name of the AuditSink
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/auditregistration.k8s.io/v1alpha1/watch/auditsinks":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/auditregistration.k8s.io/v1alpha1/watch/auditsinks/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the AuditSink
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/authentication.k8s.io/v1/tokenreviews":
    parameters:
    - description: 'When present, indicates that modifications should not be persisted.
        An invalid or unrecognized dryRun directive will result in an error response
        and no further processing of the request. Valid values are: - All: all dry
        run stages will be processed'
      in: query
      name: dryRun
      schema:
        type: string
        uniqueItems: true
    - description: fieldManager is a name associated with the actor or entity that
        is making these changes. The value must be less than or 128 characters long,
        and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
      in: query
      name: fieldManager
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/authentication.k8s.io/v1beta1/tokenreviews":
    parameters:
    - description: 'When present, indicates that modifications should not be persisted.
        An invalid or unrecognized dryRun directive will result in an error response
        and no further processing of the request. Valid values are: - All: all dry
        run stages will be processed'
      in: query
      name: dryRun
      schema:
        type: string
        uniqueItems: true
    - description: fieldManager is a name associated with the actor or entity that
        is making these changes. The value must be less than or 128 characters long,
        and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
      in: query
      name: fieldManager
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews":
    parameters:
    - description: 'When present, indicates that modifications should not be persisted.
        An invalid or unrecognized dryRun directive will result in an error response
        and no further processing of the request. Valid values are: - All: all dry
        run stages will be processed'
      in: query
      name: dryRun
      schema:
        type: string
        uniqueItems: true
    - description: fieldManager is a name associated with the actor or entity that
        is making these changes. The value must be less than or 128 characters long,
        and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
      in: query
      name: fieldManager
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/authorization.k8s.io/v1/selfsubjectaccessreviews":
    parameters:
    - description: 'When present, indicates that modifications should not be persisted.
        An invalid or unrecognized dryRun directive will result in an error response
        and no further processing of the request. Valid values are: - All: all dry
        run stages will be processed'
      in: query
      name: dryRun
      schema:
        type: string
        uniqueItems: true
    - description: fieldManager is a name associated with the actor or entity that
        is making these changes. The value must be less than or 128 characters long,
        and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
      in: query
      name: fieldManager
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/authorization.k8s.io/v1/selfsubjectrulesreviews":
    parameters:
    - description: 'When present, indicates that modifications should not be persisted.
        An invalid or unrecognized dryRun directive will result in an error response
        and no further processing of the request. Valid values are: - All: all dry
        run stages will be processed'
      in: query
      name: dryRun
      schema:
        type: string
        uniqueItems: true
    - description: fieldManager is a name associated with the actor or entity that
        is making these changes. The value must be less than or 128 characters long,
        and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
      in: query
      name: fieldManager
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/authorization.k8s.io/v1/subjectaccessreviews":
    parameters:
    - description: 'When present, indicates that modifications should not be persisted.
        An invalid or unrecognized dryRun directive will result in an error response
        and no further processing of the request. Valid values are: - All: all dry
        run stages will be processed'
      in: query
      name: dryRun
      schema:
        type: string
        uniqueItems: true
    - description: fieldManager is a name associated with the actor or entity that
        is making these changes. The value must be less than or 128 characters long,
        and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
      in: query
      name: fieldManager
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/authorization.k8s.io/v1beta1/namespaces/{namespace}/localsubjectaccessreviews":
    parameters:
    - description: 'When present, indicates that modifications should not be persisted.
        An invalid or unrecognized dryRun directive will result in an error response
        and no further processing of the request. Valid values are: - All: all dry
        run stages will be processed'
      in: query
      name: dryRun
      schema:
        type: string
        uniqueItems: true
    - description: fieldManager is a name associated with the actor or entity that
        is making these changes. The value must be less than or 128 characters long,
        and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
      in: query
      name: fieldManager
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/authorization.k8s.io/v1beta1/selfsubjectaccessreviews":
    parameters:
    - description: 'When present, indicates that modifications should not be persisted.
        An invalid or unrecognized dryRun directive will result in an error response
        and no further processing of the request. Valid values are: - All: all dry
        run stages will be processed'
      in: query
      name: dryRun
      schema:
        type: string
        uniqueItems: true
    - description: fieldManager is a name associated with the actor or entity that
        is making these changes. The value must be less than or 128 characters long,
        and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
      in: query
      name: fieldManager
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/authorization.k8s.io/v1beta1/selfsubjectrulesreviews":
    parameters:
    - description: 'When present, indicates that modifications should not be persisted.
        An invalid or unrecognized dryRun directive will result in an error response
        and no further processing of the request. Valid values are: - All: all dry
        run stages will be processed'
      in: query
      name: dryRun
      schema:
        type: string
        uniqueItems: true
    - description: fieldManager is a name associated with the actor or entity that
        is making these changes. The value must be less than or 128 characters long,
        and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
      in: query
      name: fieldManager
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/authorization.k8s.io/v1beta1/subjectaccessreviews":
    parameters:
    - description: 'When present, indicates that modifications should not be persisted.
        An invalid or unrecognized dryRun directive will result in an error response
        and no further processing of the request. Valid values are: - All: all dry
        run stages will be processed'
      in: query
      name: dryRun
      schema:
        type: string
        uniqueItems: true
    - description: fieldManager is a name associated with the actor or entity that
        is making these changes. The value must be less than or 128 characters long,
        and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
      in: query
      name: fieldManager
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/autoscaling/v1/horizontalpodautoscalers":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}":
    parameters:
    - description: name of the HorizontalPodAutoscaler
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status":
    parameters:
    - description: name of the HorizontalPodAutoscaler
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/autoscaling/v1/watch/horizontalpodautoscalers":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/autoscaling/v1/watch/namespaces/{namespace}/horizontalpodautoscalers":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/autoscaling/v1/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the HorizontalPodAutoscaler
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/autoscaling/v2beta1/horizontalpodautoscalers":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}":
    parameters:
    - description: name of the HorizontalPodAutoscaler
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status":
    parameters:
    - description: name of the HorizontalPodAutoscaler
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/autoscaling/v2beta1/watch/horizontalpodautoscalers":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/autoscaling/v2beta1/watch/namespaces/{namespace}/horizontalpodautoscalers":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/autoscaling/v2beta1/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the HorizontalPodAutoscaler
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/autoscaling/v2beta2/horizontalpodautoscalers":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}":
    parameters:
    - description: name of the HorizontalPodAutoscaler
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}/status":
    parameters:
    - description: name of the HorizontalPodAutoscaler
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/autoscaling/v2beta2/watch/horizontalpodautoscalers":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/autoscaling/v2beta2/watch/namespaces/{namespace}/horizontalpodautoscalers":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/autoscaling/v2beta2/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the HorizontalPodAutoscaler
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/batch/v1/jobs":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/batch/v1/namespaces/{namespace}/jobs":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/batch/v1/namespaces/{namespace}/jobs/{name}":
    parameters:
    - description: name of the Job
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/batch/v1/namespaces/{namespace}/jobs/{name}/status":
    parameters:
    - description: name of the Job
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/batch/v1/watch/jobs":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/batch/v1/watch/namespaces/{namespace}/jobs":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/batch/v1/watch/namespaces/{namespace}/jobs/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the Job
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/batch/v1beta1/cronjobs":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}":
    parameters:
    - description: name of the CronJob
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}/status":
    parameters:
    - description: name of the CronJob
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/batch/v1beta1/watch/cronjobs":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/batch/v1beta1/watch/namespaces/{namespace}/cronjobs":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/batch/v1beta1/watch/namespaces/{namespace}/cronjobs/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the CronJob
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/batch/v2alpha1/cronjobs":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}":
    parameters:
    - description: name of the CronJob
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}/status":
    parameters:
    - description: name of the CronJob
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/batch/v2alpha1/watch/cronjobs":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/batch/v2alpha1/watch/namespaces/{namespace}/cronjobs":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/batch/v2alpha1/watch/namespaces/{namespace}/cronjobs/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the CronJob
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/certificates.k8s.io/v1beta1/certificatesigningrequests":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}":
    parameters:
    - description: name of the CertificateSigningRequest
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/approval":
    parameters:
    - description: 'When present, indicates that modifications should not be persisted.
        An invalid or unrecognized dryRun directive will result in an error response
        and no further processing of the request. Valid values are: - All: all dry
        run stages will be processed'
      in: query
      name: dryRun
      schema:
        type: string
        uniqueItems: true
    - description: fieldManager is a name associated with the actor or entity that
        is making these changes. The value must be less than or 128 characters long,
        and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
      in: query
      name: fieldManager
      schema:
        type: string
        uniqueItems: true
    - description: name of the CertificateSigningRequest
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/status":
    parameters:
    - description: name of the CertificateSigningRequest
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/certificates.k8s.io/v1beta1/watch/certificatesigningrequests":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/certificates.k8s.io/v1beta1/watch/certificatesigningrequests/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the CertificateSigningRequest
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/coordination.k8s.io/v1/leases":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/coordination.k8s.io/v1/namespaces/{namespace}/leases":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/coordination.k8s.io/v1/namespaces/{namespace}/leases/{name}":
    parameters:
    - description: name of the Lease
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/coordination.k8s.io/v1/watch/leases":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/coordination.k8s.io/v1/watch/namespaces/{namespace}/leases":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/coordination.k8s.io/v1/watch/namespaces/{namespace}/leases/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the Lease
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/coordination.k8s.io/v1beta1/leases":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases/{name}":
    parameters:
    - description: name of the Lease
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/coordination.k8s.io/v1beta1/watch/leases":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/coordination.k8s.io/v1beta1/watch/namespaces/{namespace}/leases":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/coordination.k8s.io/v1beta1/watch/namespaces/{namespace}/leases/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the Lease
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/discovery.k8s.io/v1alpha1/endpointslices":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/discovery.k8s.io/v1alpha1/namespaces/{namespace}/endpointslices":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/discovery.k8s.io/v1alpha1/namespaces/{namespace}/endpointslices/{name}":
    parameters:
    - description: name of the EndpointSlice
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/discovery.k8s.io/v1alpha1/watch/endpointslices":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/discovery.k8s.io/v1alpha1/watch/namespaces/{namespace}/endpointslices":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/discovery.k8s.io/v1alpha1/watch/namespaces/{namespace}/endpointslices/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the EndpointSlice
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/events.k8s.io/v1beta1/events":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events/{name}":
    parameters:
    - description: name of the Event
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/events.k8s.io/v1beta1/watch/events":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/events.k8s.io/v1beta1/watch/namespaces/{namespace}/events":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/events.k8s.io/v1beta1/watch/namespaces/{namespace}/events/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the Event
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/extensions/v1beta1/daemonsets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/extensions/v1beta1/deployments":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/extensions/v1beta1/ingresses":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}":
    parameters:
    - description: name of the DaemonSet
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status":
    parameters:
    - description: name of the DaemonSet
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/extensions/v1beta1/namespaces/{namespace}/deployments":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}":
    parameters:
    - description: name of the Deployment
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/rollback":
    parameters:
    - description: 'When present, indicates that modifications should not be persisted.
        An invalid or unrecognized dryRun directive will result in an error response
        and no further processing of the request. Valid values are: - All: all dry
        run stages will be processed'
      in: query
      name: dryRun
      schema:
        type: string
        uniqueItems: true
    - description: fieldManager is a name associated with the actor or entity that
        is making these changes. The value must be less than or 128 characters long,
        and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
      in: query
      name: fieldManager
      schema:
        type: string
        uniqueItems: true
    - description: name of the DeploymentRollback
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale":
    parameters:
    - description: name of the Scale
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status":
    parameters:
    - description: name of the Deployment
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}":
    parameters:
    - description: name of the Ingress
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status":
    parameters:
    - description: name of the Ingress
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}":
    parameters:
    - description: name of the NetworkPolicy
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}":
    parameters:
    - description: name of the ReplicaSet
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale":
    parameters:
    - description: name of the Scale
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status":
    parameters:
    - description: name of the ReplicaSet
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale":
    parameters:
    - description: name of the Scale
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/extensions/v1beta1/networkpolicies":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/extensions/v1beta1/podsecuritypolicies":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/extensions/v1beta1/podsecuritypolicies/{name}":
    parameters:
    - description: name of the PodSecurityPolicy
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/extensions/v1beta1/replicasets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/extensions/v1beta1/watch/daemonsets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/extensions/v1beta1/watch/deployments":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/extensions/v1beta1/watch/ingresses":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/extensions/v1beta1/watch/namespaces/{namespace}/daemonsets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/extensions/v1beta1/watch/namespaces/{namespace}/daemonsets/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the DaemonSet
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/extensions/v1beta1/watch/namespaces/{namespace}/deployments":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/extensions/v1beta1/watch/namespaces/{namespace}/deployments/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the Deployment
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/extensions/v1beta1/watch/namespaces/{namespace}/ingresses/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the Ingress
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/extensions/v1beta1/watch/namespaces/{namespace}/networkpolicies":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/extensions/v1beta1/watch/namespaces/{namespace}/networkpolicies/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the NetworkPolicy
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/extensions/v1beta1/watch/namespaces/{namespace}/replicasets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/extensions/v1beta1/watch/namespaces/{namespace}/replicasets/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the ReplicaSet
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/extensions/v1beta1/watch/networkpolicies":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/extensions/v1beta1/watch/podsecuritypolicies":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/extensions/v1beta1/watch/podsecuritypolicies/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the PodSecurityPolicy
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/extensions/v1beta1/watch/replicasets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}":
    parameters:
    - description: name of the NetworkPolicy
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/networking.k8s.io/v1/networkpolicies":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/networkpolicies":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/networkpolicies/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the NetworkPolicy
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/networking.k8s.io/v1/watch/networkpolicies":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/networking.k8s.io/v1beta1/ingresses":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses/{name}":
    parameters:
    - description: name of the Ingress
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses/{name}/status":
    parameters:
    - description: name of the Ingress
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/networking.k8s.io/v1beta1/watch/ingresses":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/networking.k8s.io/v1beta1/watch/namespaces/{namespace}/ingresses":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/networking.k8s.io/v1beta1/watch/namespaces/{namespace}/ingresses/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the Ingress
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/node.k8s.io/v1alpha1/runtimeclasses":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/node.k8s.io/v1alpha1/runtimeclasses/{name}":
    parameters:
    - description: name of the RuntimeClass
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/node.k8s.io/v1alpha1/watch/runtimeclasses":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/node.k8s.io/v1alpha1/watch/runtimeclasses/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the RuntimeClass
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/node.k8s.io/v1beta1/runtimeclasses":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/node.k8s.io/v1beta1/runtimeclasses/{name}":
    parameters:
    - description: name of the RuntimeClass
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/node.k8s.io/v1beta1/watch/runtimeclasses":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/node.k8s.io/v1beta1/watch/runtimeclasses/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the RuntimeClass
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}":
    parameters:
    - description: name of the PodDisruptionBudget
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status":
    parameters:
    - description: name of the PodDisruptionBudget
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/policy/v1beta1/poddisruptionbudgets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/policy/v1beta1/podsecuritypolicies":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/policy/v1beta1/podsecuritypolicies/{name}":
    parameters:
    - description: name of the PodSecurityPolicy
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/policy/v1beta1/watch/namespaces/{namespace}/poddisruptionbudgets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/policy/v1beta1/watch/namespaces/{namespace}/poddisruptionbudgets/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the PodDisruptionBudget
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/policy/v1beta1/watch/poddisruptionbudgets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/policy/v1beta1/watch/podsecuritypolicies":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/policy/v1beta1/watch/podsecuritypolicies/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the PodSecurityPolicy
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}":
    parameters:
    - description: name of the ClusterRoleBinding
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1/clusterroles":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1/clusterroles/{name}":
    parameters:
    - description: name of the ClusterRole
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}":
    parameters:
    - description: name of the RoleBinding
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}":
    parameters:
    - description: name of the Role
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1/rolebindings":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1/roles":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the ClusterRoleBinding
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1/watch/clusterroles":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1/watch/clusterroles/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the ClusterRole
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/rolebindings":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/rolebindings/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the RoleBinding
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/roles":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/roles/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the Role
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1/watch/rolebindings":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1/watch/roles":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/{name}":
    parameters:
    - description: name of the ClusterRoleBinding
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/{name}":
    parameters:
    - description: name of the ClusterRole
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings/{name}":
    parameters:
    - description: name of the RoleBinding
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles/{name}":
    parameters:
    - description: name of the Role
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1alpha1/rolebindings":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1alpha1/roles":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterrolebindings":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterrolebindings/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the ClusterRoleBinding
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterroles":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterroles/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the ClusterRole
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/{namespace}/rolebindings":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/{namespace}/rolebindings/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the RoleBinding
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/{namespace}/roles":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/{namespace}/roles/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the Role
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1alpha1/watch/rolebindings":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1alpha1/watch/roles":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}":
    parameters:
    - description: name of the ClusterRoleBinding
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1beta1/clusterroles":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}":
    parameters:
    - description: name of the ClusterRole
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}":
    parameters:
    - description: name of the RoleBinding
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}":
    parameters:
    - description: name of the Role
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1beta1/rolebindings":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1beta1/roles":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterrolebindings":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterrolebindings/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the ClusterRoleBinding
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterroles":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1beta1/watch/clusterroles/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the ClusterRole
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/rolebindings":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/rolebindings/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the RoleBinding
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/roles":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1beta1/watch/namespaces/{namespace}/roles/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the Role
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1beta1/watch/rolebindings":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/rbac.authorization.k8s.io/v1beta1/watch/roles":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/scheduling.k8s.io/v1/priorityclasses":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/scheduling.k8s.io/v1/priorityclasses/{name}":
    parameters:
    - description: name of the PriorityClass
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/scheduling.k8s.io/v1/watch/priorityclasses":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/scheduling.k8s.io/v1/watch/priorityclasses/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the PriorityClass
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/scheduling.k8s.io/v1alpha1/priorityclasses":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/scheduling.k8s.io/v1alpha1/priorityclasses/{name}":
    parameters:
    - description: name of the PriorityClass
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/scheduling.k8s.io/v1alpha1/watch/priorityclasses":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/scheduling.k8s.io/v1alpha1/watch/priorityclasses/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the PriorityClass
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/scheduling.k8s.io/v1beta1/priorityclasses":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/scheduling.k8s.io/v1beta1/priorityclasses/{name}":
    parameters:
    - description: name of the PriorityClass
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/scheduling.k8s.io/v1beta1/watch/priorityclasses":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/scheduling.k8s.io/v1beta1/watch/priorityclasses/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the PriorityClass
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets":
    parameters:
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets/{name}":
    parameters:
    - description: name of the PodPreset
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/settings.k8s.io/v1alpha1/podpresets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/settings.k8s.io/v1alpha1/watch/namespaces/{namespace}/podpresets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/settings.k8s.io/v1alpha1/watch/namespaces/{namespace}/podpresets/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the PodPreset
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: object name and auth scope, such as for teams and projects
      in: path
      name: namespace
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/settings.k8s.io/v1alpha1/watch/podpresets":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/storage.k8s.io/v1/storageclasses":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/storage.k8s.io/v1/storageclasses/{name}":
    parameters:
    - description: name of the StorageClass
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/storage.k8s.io/v1/volumeattachments":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/storage.k8s.io/v1/volumeattachments/{name}":
    parameters:
    - description: name of the VolumeAttachment
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/storage.k8s.io/v1/volumeattachments/{name}/status":
    parameters:
    - description: name of the VolumeAttachment
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/storage.k8s.io/v1/watch/storageclasses":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/storage.k8s.io/v1/watch/storageclasses/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the StorageClass
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/storage.k8s.io/v1/watch/volumeattachments":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/storage.k8s.io/v1/watch/volumeattachments/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the VolumeAttachment
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/storage.k8s.io/v1alpha1/volumeattachments":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/storage.k8s.io/v1alpha1/volumeattachments/{name}":
    parameters:
    - description: name of the VolumeAttachment
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/storage.k8s.io/v1alpha1/watch/volumeattachments":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/storage.k8s.io/v1alpha1/watch/volumeattachments/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the VolumeAttachment
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/storage.k8s.io/v1beta1/csidrivers":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/storage.k8s.io/v1beta1/csidrivers/{name}":
    parameters:
    - description: name of the CSIDriver
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/storage.k8s.io/v1beta1/csinodes":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/storage.k8s.io/v1beta1/csinodes/{name}":
    parameters:
    - description: name of the CSINode
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/storage.k8s.io/v1beta1/storageclasses":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/storage.k8s.io/v1beta1/storageclasses/{name}":
    parameters:
    - description: name of the StorageClass
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/storage.k8s.io/v1beta1/volumeattachments":
    parameters:
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/storage.k8s.io/v1beta1/volumeattachments/{name}":
    parameters:
    - description: name of the VolumeAttachment
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
  "/apis/storage.k8s.io/v1beta1/watch/csidrivers":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/storage.k8s.io/v1beta1/watch/csidrivers/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the CSIDriver
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/storage.k8s.io/v1beta1/watch/csinodes":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/storage.k8s.io/v1beta1/watch/csinodes/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the CSINode
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/storage.k8s.io/v1beta1/watch/storageclasses":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/storage.k8s.io/v1beta1/watch/storageclasses/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the StorageClass
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/storage.k8s.io/v1beta1/watch/volumeattachments":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/apis/storage.k8s.io/v1beta1/watch/volumeattachments/{name}":
    parameters:
    - description: |-
        allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.

        This field is beta.
      in: query
      name: allowWatchBookmarks
      schema:
        type: boolean
        uniqueItems: true
    - description: |-
        The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key".

        This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
      in: query
      name: continue
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their fields.
        Defaults to everything.
      in: query
      name: fieldSelector
      schema:
        type: string
        uniqueItems: true
    - description: A selector to restrict the list of returned objects by their labels.
        Defaults to everything.
      in: query
      name: labelSelector
      schema:
        type: string
        uniqueItems: true
    - description: |-
        limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.

        The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
      in: query
      name: limit
      schema:
        type: integer
        uniqueItems: true
    - description: name of the VolumeAttachment
      in: path
      name: name
      required: true
      schema:
        type: string
        uniqueItems: true
    - description: If 'true', then the output is pretty printed.
      in: query
      name: pretty
      schema:
        type: string
        uniqueItems: true
    - description: 'When specified with a watch call, shows changes that occur after
        that particular version of a resource. Defaults to changes from the beginning
        of history. When specified for list: - if unset, then the result is returned
        from remote storage based on quorum-read flag; - if it''s 0, then we simply
        return what we currently have in cache, no guarantee; - if set to non zero,
        then the result is at least as fresh as given rv.'
      in: query
      name: resourceVersion
      schema:
        type: string
        uniqueItems: true
    - description: Timeout for the list/watch call. This limits the duration of the
        call, regardless of any activity or inactivity.
      in: query
      name: timeoutSeconds
      schema:
        type: integer
        uniqueItems: true
    - description: Watch for changes to the described resources and return them as
        a stream of add, update, and remove notifications. Specify resourceVersion.
      in: query
      name: watch
      schema:
        type: boolean
        uniqueItems: true
  "/logs/{logpath}":
    parameters:
    - description: path to the log
      in: path
      name: logpath
      required: true
      schema:
        type: string
        uniqueItems: true
